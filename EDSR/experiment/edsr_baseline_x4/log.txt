EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/4440]	[L1: 10.6388]	6.6+6.5s
[3200/4440]	[L1: 6.6377]	2.4+2.9s
[4800/4440]	[L1: 5.1171]	2.5+3.0s
[6400/4440]	[L1: 4.2636]	2.4+2.9s
[8000/4440]	[L1: 3.7176]	2.4+2.9s
[9600/4440]	[L1: 3.3110]	2.5+2.9s
[11200/4440]	[L1: 2.9935]	2.4+2.9s
[12800/4440]	[L1: 2.7416]	2.4+2.9s
[14400/4440]	[L1: 2.5556]	2.4+2.9s
[16000/4440]	[L1: 2.3850]	2.4+2.9s
[17600/4440]	[L1: 2.2413]	2.5+3.0s
[19200/4440]	[L1: 2.1214]	2.4+3.0s
[20800/4440]	[L1: 2.0192]	2.5+2.9s
[22400/4440]	[L1: 1.9624]	2.5+2.9s
[24000/4440]	[L1: 1.8767]	2.5+2.9s
[25600/4440]	[L1: 1.8036]	2.5+2.9s
[27200/4440]	[L1: 1.7428]	2.5+2.9s
[28800/4440]	[L1: 1.6895]	2.5+2.9s
[30400/4440]	[L1: 1.6367]	2.6+2.9s
[32000/4440]	[L1: 1.5889]	2.5+2.9s
[33600/4440]	[L1: 1.5497]	2.5+2.9s
[35200/4440]	[L1: 1.5168]	2.5+2.9s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/4440]	[L1: 10.7205]	6.1+5.8s
[3200/4440]	[L1: 6.6773]	4.6+2.2s
[4800/4440]	[L1: 5.1289]	4.5+2.3s
[6400/4440]	[L1: 4.2700]	4.5+2.3s
[8000/4440]	[L1: 3.7131]	4.6+2.3s
[9600/4440]	[L1: 3.3204]	4.5+2.3s
[11200/4440]	[L1: 3.0119]	4.5+2.3s
[12800/4440]	[L1: 2.7641]	4.5+2.3s
[14400/4440]	[L1: 2.5543]	4.6+2.3s
[16000/4440]	[L1: 2.4070]	4.5+2.3s
[17600/4440]	[L1: 2.2604]	4.5+2.3s
[19200/4440]	[L1: 2.1595]	4.5+2.3s
[20800/4440]	[L1: 2.0582]	4.5+2.3s
[22400/4440]	[L1: 1.9707]	4.6+2.3s
[24000/4440]	[L1: 1.8847]	4.7+2.4s
[25600/4440]	[L1: 1.8092]	4.6+2.3s
[27200/4440]	[L1: 1.7471]	4.6+2.3s
[28800/4440]	[L1: 1.7038]	4.5+2.3s
[30400/4440]	[L1: 1.6594]	4.5+2.3s
[32000/4440]	[L1: 1.6114]	4.6+2.3s
[33600/4440]	[L1: 1.5758]	4.6+2.2s
[35200/4440]	[L1: 1.5453]	4.5+2.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/4440]	[L1: 10.6561]	4.2+6.2s
[3200/4440]	[L1: 6.8077]	2.5+3.0s
[4800/4440]	[L1: 5.1641]	4.1+2.5s
[6400/4440]	[L1: 4.2758]	4.6+2.3s
[8000/4440]	[L1: 3.6933]	4.7+2.4s
[9600/4440]	[L1: 3.2832]	4.6+2.2s
[11200/4440]	[L1: 2.9930]	4.5+2.3s
[12800/4440]	[L1: 2.7358]	4.7+2.4s
[14400/4440]	[L1: 2.5381]	4.7+2.5s
[16000/4440]	[L1: 2.3697]	4.6+2.4s
[17600/4440]	[L1: 2.2492]	4.5+2.3s
[19200/4440]	[L1: 2.1298]	4.7+2.4s
[20800/4440]	[L1: 2.0243]	4.6+2.4s
[22400/4440]	[L1: 1.9369]	4.5+2.3s
[24000/4440]	[L1: 1.8566]	4.6+2.4s
[25600/4440]	[L1: 1.8011]	4.7+2.4s
[27200/4440]	[L1: 1.7457]	4.6+2.3s
[28800/4440]	[L1: 1.6880]	4.7+2.3s
[30400/4440]	[L1: 1.6388]	4.6+2.3s
[32000/4440]	[L1: 1.6011]	4.6+2.3s
[33600/4440]	[L1: 1.5566]	4.6+2.3s
[35200/4440]	[L1: 1.5157]	4.6+2.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/4440]	[L1: 10.7171]	6.1+6.0s
[3200/4440]	[L1: 6.6267]	4.6+2.5s
[4800/4440]	[L1: 5.1162]	4.6+2.3s
[6400/4440]	[L1: 4.2528]	4.5+2.3s
[8000/4440]	[L1: 3.7151]	4.6+2.3s
[9600/4440]	[L1: 3.2964]	4.5+2.3s
[11200/4440]	[L1: 2.9910]	4.5+2.3s
[12800/4440]	[L1: 2.7395]	4.5+2.3s
[14400/4440]	[L1: 2.5391]	4.4+2.3s
[16000/4440]	[L1: 2.4074]	4.6+2.2s
[17600/4440]	[L1: 2.2574]	4.6+2.2s
[19200/4440]	[L1: 2.1318]	4.5+2.2s
[20800/4440]	[L1: 2.0327]	4.5+2.2s
[22400/4440]	[L1: 1.9423]	4.6+2.2s
[24000/4440]	[L1: 1.8725]	4.6+2.2s
[25600/4440]	[L1: 1.8124]	4.5+2.3s
[27200/4440]	[L1: 1.7470]	4.5+2.3s
[28800/4440]	[L1: 1.6893]	4.5+2.3s
[30400/4440]	[L1: 1.6465]	4.5+2.3s
[32000/4440]	[L1: 1.5986]	4.5+2.3s
[33600/4440]	[L1: 1.5592]	4.5+2.3s
[35200/4440]	[L1: 1.5317]	4.5+2.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[FFHQ x4]	PSNR: 38.180 (Best: 38.180 @epoch 1)
[FFHQ x4]	PSNR: 38.184 (Best: 38.184 @epoch 1)
[FFHQ x4]	PSNR: 38.186 (Best: 38.186 @epoch 1)
[FFHQ x4]	PSNR: 38.183 (Best: 38.183 @epoch 1)
[FFHQ x4]	PSNR: 38.189 (Best: 38.189 @epoch 1)
[FFHQ x4]	PSNR: 38.185 (Best: 38.185 @epoch 1)
[FFHQ x4]	PSNR: 38.190 (Best: 38.190 @epoch 1)
[FFHQ x4]	PSNR: 38.209 (Best: 38.209 @epoch 1)
[FFHQ x4]	PSNR: 38.198 (Best: 38.198 @epoch 1)
[FFHQ x4]	PSNR: 38.199 (Best: 38.199 @epoch 1)
[FFHQ x4]	PSNR: 38.192 (Best: 38.192 @epoch 1)
[FFHQ x4]	PSNR: 38.187 (Best: 38.187 @epoch 1)
[FFHQ x4]	PSNR: 38.201 (Best: 38.201 @epoch 1)
[FFHQ x4]	PSNR: 38.192 (Best: 38.192 @epoch 1)
[FFHQ x4]	PSNR: 38.206 (Best: 38.206 @epoch 1)
[FFHQ x4]	PSNR: 38.202 (Best: 38.202 @epoch 1)
[FFHQ x4]	PSNR: 38.207 (Best: 38.207 @epoch 1)
[FFHQ x4]	PSNR: 38.181 (Best: 38.181 @epoch 1)
[FFHQ x4]	PSNR: 38.207 (Best: 38.207 @epoch 1)
[FFHQ x4]	PSNR: 38.169 (Best: 38.169 @epoch 1)
[FFHQ x4]	PSNR: 38.191 (Best: 38.191 @epoch 1)
[FFHQ x4]	PSNR: 38.166 (Best: 38.166 @epoch 1)
[FFHQ x4]	PSNR: 38.224 (Best: 38.224 @epoch 1)
[FFHQ x4]	PSNR: 38.195 (Best: 38.195 @epoch 1)
[FFHQ x4]	PSNR: 38.187 (Best: 38.187 @epoch 1)
Forward: 9.79s

Saving...
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[FFHQ x4]	PSNR: 38.180 (Best: 38.180 @epoch 1)
[FFHQ x4]	PSNR: 38.184 (Best: 38.184 @epoch 1)
[FFHQ x4]	PSNR: 38.186 (Best: 38.186 @epoch 1)
[FFHQ x4]	PSNR: 38.183 (Best: 38.183 @epoch 1)
[FFHQ x4]	PSNR: 38.189 (Best: 38.189 @epoch 1)
[FFHQ x4]	PSNR: 38.185 (Best: 38.185 @epoch 1)
[FFHQ x4]	PSNR: 38.190 (Best: 38.190 @epoch 1)
[FFHQ x4]	PSNR: 38.209 (Best: 38.209 @epoch 1)
[FFHQ x4]	PSNR: 38.198 (Best: 38.198 @epoch 1)
[FFHQ x4]	PSNR: 38.199 (Best: 38.199 @epoch 1)
[FFHQ x4]	PSNR: 38.192 (Best: 38.192 @epoch 1)
[FFHQ x4]	PSNR: 38.187 (Best: 38.187 @epoch 1)
[FFHQ x4]	PSNR: 38.201 (Best: 38.201 @epoch 1)
[FFHQ x4]	PSNR: 38.192 (Best: 38.192 @epoch 1)
[FFHQ x4]	PSNR: 38.206 (Best: 38.206 @epoch 1)
[FFHQ x4]	PSNR: 38.202 (Best: 38.202 @epoch 1)
[FFHQ x4]	PSNR: 38.207 (Best: 38.207 @epoch 1)
[FFHQ x4]	PSNR: 38.181 (Best: 38.181 @epoch 1)
[FFHQ x4]	PSNR: 38.207 (Best: 38.207 @epoch 1)
[FFHQ x4]	PSNR: 38.169 (Best: 38.169 @epoch 1)
[FFHQ x4]	PSNR: 38.191 (Best: 38.191 @epoch 1)
[FFHQ x4]	PSNR: 38.166 (Best: 38.166 @epoch 1)
[FFHQ x4]	PSNR: 38.224 (Best: 38.224 @epoch 1)
[FFHQ x4]	PSNR: 38.195 (Best: 38.195 @epoch 1)
[FFHQ x4]	PSNR: 38.187 (Best: 38.187 @epoch 1)
Forward: 9.17s

Saving...
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[FFHQ x4]	PSNR: 38.180 (Best: 38.180 @epoch 1)
[FFHQ x4]	PSNR: 38.184 (Best: 38.184 @epoch 1)
[FFHQ x4]	PSNR: 38.186 (Best: 38.186 @epoch 1)
[FFHQ x4]	PSNR: 38.183 (Best: 38.183 @epoch 1)
[FFHQ x4]	PSNR: 38.189 (Best: 38.189 @epoch 1)
[FFHQ x4]	PSNR: 38.185 (Best: 38.185 @epoch 1)
[FFHQ x4]	PSNR: 38.190 (Best: 38.190 @epoch 1)
[FFHQ x4]	PSNR: 38.209 (Best: 38.209 @epoch 1)
[FFHQ x4]	PSNR: 38.198 (Best: 38.198 @epoch 1)
[FFHQ x4]	PSNR: 38.199 (Best: 38.199 @epoch 1)
[FFHQ x4]	PSNR: 38.192 (Best: 38.192 @epoch 1)
[FFHQ x4]	PSNR: 38.187 (Best: 38.187 @epoch 1)
[FFHQ x4]	PSNR: 38.201 (Best: 38.201 @epoch 1)
[FFHQ x4]	PSNR: 38.192 (Best: 38.192 @epoch 1)
[FFHQ x4]	PSNR: 38.206 (Best: 38.206 @epoch 1)
[FFHQ x4]	PSNR: 38.202 (Best: 38.202 @epoch 1)
[FFHQ x4]	PSNR: 38.207 (Best: 38.207 @epoch 1)
[FFHQ x4]	PSNR: 38.181 (Best: 38.181 @epoch 1)
[FFHQ x4]	PSNR: 38.207 (Best: 38.207 @epoch 1)
[FFHQ x4]	PSNR: 38.169 (Best: 38.169 @epoch 1)
[FFHQ x4]	PSNR: 38.191 (Best: 38.191 @epoch 1)
[FFHQ x4]	PSNR: 38.166 (Best: 38.166 @epoch 1)
[FFHQ x4]	PSNR: 38.224 (Best: 38.224 @epoch 1)
[FFHQ x4]	PSNR: 38.195 (Best: 38.195 @epoch 1)
[FFHQ x4]	PSNR: 38.187 (Best: 38.187 @epoch 1)
Forward: 9.19s

Saving...
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/4440]	[L1: 10.9028]	28.3+142.5s
[3200/4440]	[L1: 6.7547]	26.2+138.6s

Evaluation:
[FFHQ x4]	PSNR: 249.815 (Best: 249.815 @epoch 1)
[FFHQ x4]	PSNR: 250.024 (Best: 250.024 @epoch 1)
[FFHQ x4]	PSNR: 249.952 (Best: 249.952 @epoch 1)
[FFHQ x4]	PSNR: 249.890 (Best: 249.890 @epoch 1)
[FFHQ x4]	PSNR: 249.901 (Best: 249.901 @epoch 1)
[FFHQ x4]	PSNR: 249.992 (Best: 249.992 @epoch 1)
[FFHQ x4]	PSNR: 249.856 (Best: 249.856 @epoch 1)
[FFHQ x4]	PSNR: 249.590 (Best: 249.590 @epoch 1)
[FFHQ x4]	PSNR: 249.763 (Best: 249.763 @epoch 1)
[FFHQ x4]	PSNR: 249.708 (Best: 249.708 @epoch 1)
[FFHQ x4]	PSNR: 249.778 (Best: 249.778 @epoch 1)
[FFHQ x4]	PSNR: 249.857 (Best: 249.857 @epoch 1)
[FFHQ x4]	PSNR: 249.708 (Best: 249.708 @epoch 1)
[FFHQ x4]	PSNR: 249.925 (Best: 249.925 @epoch 1)
[FFHQ x4]	PSNR: 249.741 (Best: 249.741 @epoch 1)
[FFHQ x4]	PSNR: 249.760 (Best: 249.760 @epoch 1)
[FFHQ x4]	PSNR: 249.719 (Best: 249.719 @epoch 1)
[FFHQ x4]	PSNR: 249.837 (Best: 249.837 @epoch 1)
[FFHQ x4]	PSNR: 249.666 (Best: 249.666 @epoch 1)
[FFHQ x4]	PSNR: 249.964 (Best: 249.964 @epoch 1)
[FFHQ x4]	PSNR: 249.957 (Best: 249.957 @epoch 1)
[FFHQ x4]	PSNR: 249.995 (Best: 249.995 @epoch 1)
[FFHQ x4]	PSNR: 249.537 (Best: 249.537 @epoch 1)
[FFHQ x4]	PSNR: 249.850 (Best: 249.850 @epoch 1)
[FFHQ x4]	PSNR: 249.785 (Best: 249.785 @epoch 1)
Forward: 8.46s

Saving...
Total: 8.83s

[Epoch 2]	Learning rate: 1.00e-4
[1600/4440]	[L1: 1.7762]	25.3+138.0s
[3200/4440]	[L1: 1.6455]	26.5+137.3s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[FFHQ x4]	PSNR: 7.159 (Best: 7.159 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.159 (Best: 7.159 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.162 (Best: 7.162 @epoch 1)
[FFHQ x4]	PSNR: 7.162 (Best: 7.162 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.163 (Best: 7.163 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.163 (Best: 7.163 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.159 (Best: 7.159 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.157 (Best: 7.157 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.156 (Best: 7.156 @epoch 1)
[FFHQ x4]	PSNR: 7.167 (Best: 7.167 @epoch 1)
[FFHQ x4]	PSNR: 7.162 (Best: 7.162 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
Forward: 9.26s

Saving...
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[FFHQ x4]	PSNR: 7.159 (Best: 7.159 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.159 (Best: 7.159 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.162 (Best: 7.162 @epoch 1)
[FFHQ x4]	PSNR: 7.162 (Best: 7.162 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
[FFHQ x4]	PSNR: 7.163 (Best: 7.163 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.163 (Best: 7.163 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.159 (Best: 7.159 @epoch 1)
[FFHQ x4]	PSNR: 7.164 (Best: 7.164 @epoch 1)
[FFHQ x4]	PSNR: 7.157 (Best: 7.157 @epoch 1)
[FFHQ x4]	PSNR: 7.161 (Best: 7.161 @epoch 1)
[FFHQ x4]	PSNR: 7.156 (Best: 7.156 @epoch 1)
[FFHQ x4]	PSNR: 7.167 (Best: 7.167 @epoch 1)
[FFHQ x4]	PSNR: 7.162 (Best: 7.162 @epoch 1)
[FFHQ x4]	PSNR: 7.160 (Best: 7.160 @epoch 1)
Forward: 11.73s

Saving...
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/4440]	[L1: 10.8356]	25.3+80.0s
[3200/4440]	[L1: 6.7252]	19.8+75.6s

Evaluation:
[FFHQ x4]	PSNR: 48.956 (Best: 48.956 @epoch 1)
[FFHQ x4]	PSNR: 48.943 (Best: 48.943 @epoch 1)
[FFHQ x4]	PSNR: 48.942 (Best: 48.942 @epoch 1)
[FFHQ x4]	PSNR: 48.928 (Best: 48.928 @epoch 1)
[FFHQ x4]	PSNR: 48.932 (Best: 48.932 @epoch 1)
[FFHQ x4]	PSNR: 48.933 (Best: 48.933 @epoch 1)
[FFHQ x4]	PSNR: 48.917 (Best: 48.917 @epoch 1)
[FFHQ x4]	PSNR: 48.806 (Best: 48.806 @epoch 1)
[FFHQ x4]	PSNR: 48.883 (Best: 48.883 @epoch 1)
[FFHQ x4]	PSNR: 48.906 (Best: 48.906 @epoch 1)
[FFHQ x4]	PSNR: 48.891 (Best: 48.891 @epoch 1)
[FFHQ x4]	PSNR: 48.938 (Best: 48.938 @epoch 1)
[FFHQ x4]	PSNR: 48.885 (Best: 48.885 @epoch 1)
[FFHQ x4]	PSNR: 48.944 (Best: 48.944 @epoch 1)
[FFHQ x4]	PSNR: 48.880 (Best: 48.880 @epoch 1)
[FFHQ x4]	PSNR: 48.874 (Best: 48.874 @epoch 1)
[FFHQ x4]	PSNR: 48.854 (Best: 48.854 @epoch 1)
[FFHQ x4]	PSNR: 48.914 (Best: 48.914 @epoch 1)
[FFHQ x4]	PSNR: 48.861 (Best: 48.861 @epoch 1)
[FFHQ x4]	PSNR: 48.977 (Best: 48.977 @epoch 1)
[FFHQ x4]	PSNR: 48.958 (Best: 48.958 @epoch 1)
[FFHQ x4]	PSNR: 48.947 (Best: 48.947 @epoch 1)
[FFHQ x4]	PSNR: 48.747 (Best: 48.747 @epoch 1)
[FFHQ x4]	PSNR: 48.922 (Best: 48.922 @epoch 1)
[FFHQ x4]	PSNR: 48.908 (Best: 48.908 @epoch 1)
Forward: 8.94s

Saving...
Total: 9.25s

[Epoch 2]	Learning rate: 1.00e-4
[1600/4440]	[L1: 1.6184]	19.9+76.8s
[3200/4440]	[L1: 1.5426]	20.8+74.6s

Evaluation:
[FFHQ x4]	PSNR: 47.618 (Best: 48.956 @epoch 1)
[FFHQ x4]	PSNR: 47.678 (Best: 48.943 @epoch 1)
[FFHQ x4]	PSNR: 47.659 (Best: 48.942 @epoch 1)
[FFHQ x4]	PSNR: 47.637 (Best: 48.928 @epoch 1)
[FFHQ x4]	PSNR: 47.651 (Best: 48.932 @epoch 1)
[FFHQ x4]	PSNR: 47.691 (Best: 48.933 @epoch 1)
[FFHQ x4]	PSNR: 47.630 (Best: 48.917 @epoch 1)
[FFHQ x4]	PSNR: 47.615 (Best: 48.806 @epoch 1)
[FFHQ x4]	PSNR: 47.628 (Best: 48.883 @epoch 1)
[FFHQ x4]	PSNR: 47.615 (Best: 48.906 @epoch 1)
[FFHQ x4]	PSNR: 47.629 (Best: 48.891 @epoch 1)
[FFHQ x4]	PSNR: 47.651 (Best: 48.938 @epoch 1)
[FFHQ x4]	PSNR: 47.615 (Best: 48.885 @epoch 1)
[FFHQ x4]	PSNR: 47.682 (Best: 48.944 @epoch 1)
[FFHQ x4]	PSNR: 47.649 (Best: 48.880 @epoch 1)
[FFHQ x4]	PSNR: 47.642 (Best: 48.874 @epoch 1)
[FFHQ x4]	PSNR: 47.655 (Best: 48.854 @epoch 1)
[FFHQ x4]	PSNR: 47.640 (Best: 48.914 @epoch 1)
[FFHQ x4]	PSNR: 47.631 (Best: 48.861 @epoch 1)
[FFHQ x4]	PSNR: 47.636 (Best: 48.977 @epoch 1)
[FFHQ x4]	PSNR: 47.687 (Best: 48.958 @epoch 1)
[FFHQ x4]	PSNR: 47.648 (Best: 48.947 @epoch 1)
[FFHQ x4]	PSNR: 47.660 (Best: 48.747 @epoch 1)
[FFHQ x4]	PSNR: 47.664 (Best: 48.922 @epoch 1)
[FFHQ x4]	PSNR: 47.620 (Best: 48.908 @epoch 1)
Forward: 20.52s

Saving...
Total: 21.04s

[Epoch 3]	Learning rate: 1.00e-4
[1600/4440]	[L1: 1.2638]	21.1+77.8s
[3200/4440]	[L1: 1.0946]	19.5+74.2s

Evaluation:
[FFHQ x4]	PSNR: 50.913 (Best: 50.913 @epoch 3)
[FFHQ x4]	PSNR: 51.003 (Best: 51.003 @epoch 3)
[FFHQ x4]	PSNR: 50.974 (Best: 50.974 @epoch 3)
[FFHQ x4]	PSNR: 50.950 (Best: 50.950 @epoch 3)
[FFHQ x4]	PSNR: 50.945 (Best: 50.945 @epoch 3)
[FFHQ x4]	PSNR: 50.971 (Best: 50.971 @epoch 3)
[FFHQ x4]	PSNR: 50.944 (Best: 50.944 @epoch 3)
[FFHQ x4]	PSNR: 50.832 (Best: 50.832 @epoch 3)
[FFHQ x4]	PSNR: 50.891 (Best: 50.891 @epoch 3)
[FFHQ x4]	PSNR: 50.841 (Best: 50.841 @epoch 3)
[FFHQ x4]	PSNR: 50.921 (Best: 50.921 @epoch 3)
[FFHQ x4]	PSNR: 50.919 (Best: 50.919 @epoch 3)
[FFHQ x4]	PSNR: 50.870 (Best: 50.870 @epoch 3)
[FFHQ x4]	PSNR: 50.920 (Best: 50.920 @epoch 3)
[FFHQ x4]	PSNR: 50.854 (Best: 50.854 @epoch 3)
[FFHQ x4]	PSNR: 50.895 (Best: 50.895 @epoch 3)
[FFHQ x4]	PSNR: 50.838 (Best: 50.838 @epoch 3)
[FFHQ x4]	PSNR: 50.950 (Best: 50.950 @epoch 3)
[FFHQ x4]	PSNR: 50.847 (Best: 50.847 @epoch 3)
[FFHQ x4]	PSNR: 51.000 (Best: 51.000 @epoch 3)
[FFHQ x4]	PSNR: 50.957 (Best: 50.957 @epoch 3)
[FFHQ x4]	PSNR: 51.019 (Best: 51.019 @epoch 3)
[FFHQ x4]	PSNR: 50.764 (Best: 50.764 @epoch 3)
[FFHQ x4]	PSNR: 50.918 (Best: 50.918 @epoch 3)
[FFHQ x4]	PSNR: 50.906 (Best: 50.906 @epoch 3)
Forward: 19.01s

Saving...
Total: 19.48s

[Epoch 4]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.9638]	20.4+77.6s
[3200/4440]	[L1: 0.9352]	21.0+76.1s

Evaluation:
[FFHQ x4]	PSNR: 50.857 (Best: 50.913 @epoch 3)
[FFHQ x4]	PSNR: 50.886 (Best: 51.003 @epoch 3)
[FFHQ x4]	PSNR: 50.873 (Best: 50.974 @epoch 3)
[FFHQ x4]	PSNR: 50.878 (Best: 50.950 @epoch 3)
[FFHQ x4]	PSNR: 50.871 (Best: 50.945 @epoch 3)
[FFHQ x4]	PSNR: 50.841 (Best: 50.971 @epoch 3)
[FFHQ x4]	PSNR: 50.867 (Best: 50.944 @epoch 3)
[FFHQ x4]	PSNR: 50.804 (Best: 50.832 @epoch 3)
[FFHQ x4]	PSNR: 50.833 (Best: 50.891 @epoch 3)
[FFHQ x4]	PSNR: 50.776 (Best: 50.841 @epoch 3)
[FFHQ x4]	PSNR: 50.833 (Best: 50.921 @epoch 3)
[FFHQ x4]	PSNR: 50.817 (Best: 50.919 @epoch 3)
[FFHQ x4]	PSNR: 50.815 (Best: 50.870 @epoch 3)
[FFHQ x4]	PSNR: 50.800 (Best: 50.920 @epoch 3)
[FFHQ x4]	PSNR: 50.783 (Best: 50.854 @epoch 3)
[FFHQ x4]	PSNR: 50.811 (Best: 50.895 @epoch 3)
[FFHQ x4]	PSNR: 50.754 (Best: 50.838 @epoch 3)
[FFHQ x4]	PSNR: 50.874 (Best: 50.950 @epoch 3)
[FFHQ x4]	PSNR: 50.790 (Best: 50.847 @epoch 3)
[FFHQ x4]	PSNR: 50.910 (Best: 51.000 @epoch 3)
[FFHQ x4]	PSNR: 50.851 (Best: 50.957 @epoch 3)
[FFHQ x4]	PSNR: 50.898 (Best: 51.019 @epoch 3)
[FFHQ x4]	PSNR: 50.703 (Best: 50.764 @epoch 3)
[FFHQ x4]	PSNR: 50.827 (Best: 50.918 @epoch 3)
[FFHQ x4]	PSNR: 50.871 (Best: 50.906 @epoch 3)
Forward: 19.33s

Saving...
Total: 19.78s

[Epoch 5]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.8568]	21.5+80.0s
[3200/4440]	[L1: 0.8016]	20.9+75.8s

Evaluation:
[FFHQ x4]	PSNR: 52.786 (Best: 52.786 @epoch 5)
[FFHQ x4]	PSNR: 52.875 (Best: 52.875 @epoch 5)
[FFHQ x4]	PSNR: 52.823 (Best: 52.823 @epoch 5)
[FFHQ x4]	PSNR: 52.804 (Best: 52.804 @epoch 5)
[FFHQ x4]	PSNR: 52.731 (Best: 52.731 @epoch 5)
[FFHQ x4]	PSNR: 52.785 (Best: 52.785 @epoch 5)
[FFHQ x4]	PSNR: 52.778 (Best: 52.778 @epoch 5)
[FFHQ x4]	PSNR: 52.487 (Best: 52.487 @epoch 5)
[FFHQ x4]	PSNR: 52.631 (Best: 52.631 @epoch 5)
[FFHQ x4]	PSNR: 52.558 (Best: 52.558 @epoch 5)
[FFHQ x4]	PSNR: 52.741 (Best: 52.741 @epoch 5)
[FFHQ x4]	PSNR: 52.696 (Best: 52.696 @epoch 5)
[FFHQ x4]	PSNR: 52.588 (Best: 52.588 @epoch 5)
[FFHQ x4]	PSNR: 52.673 (Best: 52.673 @epoch 5)
[FFHQ x4]	PSNR: 52.528 (Best: 52.528 @epoch 5)
[FFHQ x4]	PSNR: 52.612 (Best: 52.612 @epoch 5)
[FFHQ x4]	PSNR: 52.529 (Best: 52.529 @epoch 5)
[FFHQ x4]	PSNR: 52.829 (Best: 52.829 @epoch 5)
[FFHQ x4]	PSNR: 52.485 (Best: 52.485 @epoch 5)
[FFHQ x4]	PSNR: 53.003 (Best: 53.003 @epoch 5)
[FFHQ x4]	PSNR: 52.736 (Best: 52.736 @epoch 5)
[FFHQ x4]	PSNR: 53.034 (Best: 53.034 @epoch 5)
[FFHQ x4]	PSNR: 52.296 (Best: 52.296 @epoch 5)
[FFHQ x4]	PSNR: 52.646 (Best: 52.646 @epoch 5)
[FFHQ x4]	PSNR: 52.728 (Best: 52.728 @epoch 5)
Forward: 18.92s

Saving...
Total: 19.41s

[Epoch 6]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7826]	20.9+78.0s
[3200/4440]	[L1: 0.7995]	20.8+75.4s

Evaluation:
[FFHQ x4]	PSNR: 54.171 (Best: 54.171 @epoch 6)
[FFHQ x4]	PSNR: 54.181 (Best: 54.181 @epoch 6)
[FFHQ x4]	PSNR: 54.122 (Best: 54.122 @epoch 6)
[FFHQ x4]	PSNR: 54.094 (Best: 54.094 @epoch 6)
[FFHQ x4]	PSNR: 53.964 (Best: 53.964 @epoch 6)
[FFHQ x4]	PSNR: 54.011 (Best: 54.011 @epoch 6)
[FFHQ x4]	PSNR: 53.949 (Best: 53.949 @epoch 6)
[FFHQ x4]	PSNR: 53.487 (Best: 53.487 @epoch 6)
[FFHQ x4]	PSNR: 53.663 (Best: 53.663 @epoch 6)
[FFHQ x4]	PSNR: 53.574 (Best: 53.574 @epoch 6)
[FFHQ x4]	PSNR: 53.930 (Best: 53.930 @epoch 6)
[FFHQ x4]	PSNR: 53.827 (Best: 53.827 @epoch 6)
[FFHQ x4]	PSNR: 53.588 (Best: 53.588 @epoch 6)
[FFHQ x4]	PSNR: 53.920 (Best: 53.920 @epoch 6)
[FFHQ x4]	PSNR: 53.481 (Best: 53.481 @epoch 6)
[FFHQ x4]	PSNR: 53.636 (Best: 53.636 @epoch 6)
[FFHQ x4]	PSNR: 53.422 (Best: 53.422 @epoch 6)
[FFHQ x4]	PSNR: 54.128 (Best: 54.128 @epoch 6)
[FFHQ x4]	PSNR: 53.463 (Best: 53.463 @epoch 6)
[FFHQ x4]	PSNR: 54.496 (Best: 54.496 @epoch 6)
[FFHQ x4]	PSNR: 53.951 (Best: 53.951 @epoch 6)
[FFHQ x4]	PSNR: 54.670 (Best: 54.670 @epoch 6)
[FFHQ x4]	PSNR: 53.270 (Best: 53.270 @epoch 6)
[FFHQ x4]	PSNR: 53.858 (Best: 53.858 @epoch 6)
[FFHQ x4]	PSNR: 53.934 (Best: 53.934 @epoch 6)
Forward: 19.65s

Saving...
Total: 20.14s

[Epoch 7]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7829]	20.7+78.0s
[3200/4440]	[L1: 0.7646]	20.4+75.1s

Evaluation:
[FFHQ x4]	PSNR: 54.904 (Best: 54.904 @epoch 7)
[FFHQ x4]	PSNR: 54.709 (Best: 54.709 @epoch 7)
[FFHQ x4]	PSNR: 54.695 (Best: 54.695 @epoch 7)
[FFHQ x4]	PSNR: 54.714 (Best: 54.714 @epoch 7)
[FFHQ x4]	PSNR: 54.530 (Best: 54.530 @epoch 7)
[FFHQ x4]	PSNR: 54.552 (Best: 54.552 @epoch 7)
[FFHQ x4]	PSNR: 54.564 (Best: 54.564 @epoch 7)
[FFHQ x4]	PSNR: 53.861 (Best: 53.861 @epoch 7)
[FFHQ x4]	PSNR: 54.137 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 54.137 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 54.541 (Best: 54.541 @epoch 7)
[FFHQ x4]	PSNR: 54.419 (Best: 54.419 @epoch 7)
[FFHQ x4]	PSNR: 54.117 (Best: 54.117 @epoch 7)
[FFHQ x4]	PSNR: 54.501 (Best: 54.501 @epoch 7)
[FFHQ x4]	PSNR: 53.988 (Best: 53.988 @epoch 7)
[FFHQ x4]	PSNR: 54.052 (Best: 54.052 @epoch 7)
[FFHQ x4]	PSNR: 53.819 (Best: 53.819 @epoch 7)
[FFHQ x4]	PSNR: 54.741 (Best: 54.741 @epoch 7)
[FFHQ x4]	PSNR: 53.892 (Best: 53.892 @epoch 7)
[FFHQ x4]	PSNR: 55.265 (Best: 55.265 @epoch 7)
[FFHQ x4]	PSNR: 54.489 (Best: 54.489 @epoch 7)
[FFHQ x4]	PSNR: 55.425 (Best: 55.425 @epoch 7)
[FFHQ x4]	PSNR: 53.474 (Best: 53.474 @epoch 7)
[FFHQ x4]	PSNR: 54.385 (Best: 54.385 @epoch 7)
[FFHQ x4]	PSNR: 54.509 (Best: 54.509 @epoch 7)
Forward: 19.08s

Saving...
Total: 19.58s

[Epoch 8]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7282]	21.3+79.0s
[3200/4440]	[L1: 0.8801]	20.9+75.8s

Evaluation:
[FFHQ x4]	PSNR: 51.228 (Best: 54.904 @epoch 7)
[FFHQ x4]	PSNR: 51.323 (Best: 54.709 @epoch 7)
[FFHQ x4]	PSNR: 51.311 (Best: 54.695 @epoch 7)
[FFHQ x4]	PSNR: 51.248 (Best: 54.714 @epoch 7)
[FFHQ x4]	PSNR: 51.237 (Best: 54.530 @epoch 7)
[FFHQ x4]	PSNR: 51.269 (Best: 54.552 @epoch 7)
[FFHQ x4]	PSNR: 51.288 (Best: 54.564 @epoch 7)
[FFHQ x4]	PSNR: 51.277 (Best: 53.861 @epoch 7)
[FFHQ x4]	PSNR: 51.230 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 51.214 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 51.228 (Best: 54.541 @epoch 7)
[FFHQ x4]	PSNR: 51.191 (Best: 54.419 @epoch 7)
[FFHQ x4]	PSNR: 51.226 (Best: 54.117 @epoch 7)
[FFHQ x4]	PSNR: 51.259 (Best: 54.501 @epoch 7)
[FFHQ x4]	PSNR: 51.234 (Best: 53.988 @epoch 7)
[FFHQ x4]	PSNR: 51.267 (Best: 54.052 @epoch 7)
[FFHQ x4]	PSNR: 51.321 (Best: 53.819 @epoch 7)
[FFHQ x4]	PSNR: 51.319 (Best: 54.741 @epoch 7)
[FFHQ x4]	PSNR: 51.246 (Best: 53.892 @epoch 7)
[FFHQ x4]	PSNR: 51.287 (Best: 55.265 @epoch 7)
[FFHQ x4]	PSNR: 51.273 (Best: 54.489 @epoch 7)
[FFHQ x4]	PSNR: 51.314 (Best: 55.425 @epoch 7)
[FFHQ x4]	PSNR: 51.344 (Best: 53.474 @epoch 7)
[FFHQ x4]	PSNR: 51.282 (Best: 54.385 @epoch 7)
[FFHQ x4]	PSNR: 51.275 (Best: 54.509 @epoch 7)
Forward: 19.43s

Saving...
Total: 19.85s

[Epoch 9]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7853]	21.7+80.3s
[3200/4440]	[L1: 0.7954]	20.4+75.3s

Evaluation:
[FFHQ x4]	PSNR: 52.154 (Best: 54.904 @epoch 7)
[FFHQ x4]	PSNR: 52.172 (Best: 54.709 @epoch 7)
[FFHQ x4]	PSNR: 52.161 (Best: 54.695 @epoch 7)
[FFHQ x4]	PSNR: 52.136 (Best: 54.714 @epoch 7)
[FFHQ x4]	PSNR: 52.145 (Best: 54.530 @epoch 7)
[FFHQ x4]	PSNR: 52.137 (Best: 54.552 @epoch 7)
[FFHQ x4]	PSNR: 52.195 (Best: 54.564 @epoch 7)
[FFHQ x4]	PSNR: 52.029 (Best: 53.861 @epoch 7)
[FFHQ x4]	PSNR: 52.085 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 52.066 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 52.125 (Best: 54.541 @epoch 7)
[FFHQ x4]	PSNR: 52.144 (Best: 54.419 @epoch 7)
[FFHQ x4]	PSNR: 52.101 (Best: 54.117 @epoch 7)
[FFHQ x4]	PSNR: 52.062 (Best: 54.501 @epoch 7)
[FFHQ x4]	PSNR: 52.058 (Best: 53.988 @epoch 7)
[FFHQ x4]	PSNR: 52.092 (Best: 54.052 @epoch 7)
[FFHQ x4]	PSNR: 52.082 (Best: 53.819 @epoch 7)
[FFHQ x4]	PSNR: 52.175 (Best: 54.741 @epoch 7)
[FFHQ x4]	PSNR: 52.066 (Best: 53.892 @epoch 7)
[FFHQ x4]	PSNR: 52.245 (Best: 55.265 @epoch 7)
[FFHQ x4]	PSNR: 52.131 (Best: 54.489 @epoch 7)
[FFHQ x4]	PSNR: 52.209 (Best: 55.425 @epoch 7)
[FFHQ x4]	PSNR: 51.819 (Best: 53.474 @epoch 7)
[FFHQ x4]	PSNR: 52.097 (Best: 54.385 @epoch 7)
[FFHQ x4]	PSNR: 52.132 (Best: 54.509 @epoch 7)
Forward: 18.92s

Saving...
Total: 19.45s

[Epoch 10]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6691]	20.9+78.2s
[3200/4440]	[L1: 0.6914]	19.9+75.0s

Evaluation:
[FFHQ x4]	PSNR: 46.943 (Best: 54.904 @epoch 7)
[FFHQ x4]	PSNR: 46.990 (Best: 54.709 @epoch 7)
[FFHQ x4]	PSNR: 46.990 (Best: 54.695 @epoch 7)
[FFHQ x4]	PSNR: 46.970 (Best: 54.714 @epoch 7)
[FFHQ x4]	PSNR: 46.976 (Best: 54.530 @epoch 7)
[FFHQ x4]	PSNR: 47.007 (Best: 54.552 @epoch 7)
[FFHQ x4]	PSNR: 46.971 (Best: 54.564 @epoch 7)
[FFHQ x4]	PSNR: 46.936 (Best: 53.861 @epoch 7)
[FFHQ x4]	PSNR: 46.986 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 46.982 (Best: 54.137 @epoch 7)
[FFHQ x4]	PSNR: 46.969 (Best: 54.541 @epoch 7)
[FFHQ x4]	PSNR: 46.989 (Best: 54.419 @epoch 7)
[FFHQ x4]	PSNR: 46.967 (Best: 54.117 @epoch 7)
[FFHQ x4]	PSNR: 47.022 (Best: 54.501 @epoch 7)
[FFHQ x4]	PSNR: 46.991 (Best: 53.988 @epoch 7)
[FFHQ x4]	PSNR: 46.973 (Best: 54.052 @epoch 7)
[FFHQ x4]	PSNR: 46.981 (Best: 53.819 @epoch 7)
[FFHQ x4]	PSNR: 46.960 (Best: 54.741 @epoch 7)
[FFHQ x4]	PSNR: 46.982 (Best: 53.892 @epoch 7)
[FFHQ x4]	PSNR: 46.952 (Best: 55.265 @epoch 7)
[FFHQ x4]	PSNR: 47.016 (Best: 54.489 @epoch 7)
[FFHQ x4]	PSNR: 46.953 (Best: 55.425 @epoch 7)
[FFHQ x4]	PSNR: 46.998 (Best: 53.474 @epoch 7)
[FFHQ x4]	PSNR: 46.994 (Best: 54.385 @epoch 7)
[FFHQ x4]	PSNR: 46.956 (Best: 54.509 @epoch 7)
Forward: 19.10s

Saving...
Total: 19.55s

[Epoch 11]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7308]	21.3+79.1s
[3200/4440]	[L1: 0.6909]	21.2+76.2s

Evaluation:
[FFHQ x4]	PSNR: 55.109 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 54.826 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 54.914 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 54.895 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 54.808 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 54.731 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 54.868 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 54.576 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 54.648 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 54.670 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.697 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 54.773 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.688 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.767 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 54.528 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.619 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 54.513 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 55.032 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 54.604 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 55.199 (Best: 55.265 @epoch 7)
[FFHQ x4]	PSNR: 54.732 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 55.204 (Best: 55.425 @epoch 7)
[FFHQ x4]	PSNR: 54.268 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 54.825 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 54.937 (Best: 54.937 @epoch 11)
Forward: 19.40s

Saving...
Total: 19.87s

[Epoch 12]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6992]	20.9+78.4s
[3200/4440]	[L1: 0.7299]	21.1+75.6s

Evaluation:
[FFHQ x4]	PSNR: 51.435 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 51.342 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 51.378 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 51.358 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 51.399 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 51.372 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 51.432 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 51.412 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 51.394 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 51.401 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 51.361 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 51.433 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 51.437 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 51.392 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 51.433 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 51.394 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 51.487 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 51.396 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 51.461 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 51.393 (Best: 55.265 @epoch 7)
[FFHQ x4]	PSNR: 51.410 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 51.328 (Best: 55.425 @epoch 7)
[FFHQ x4]	PSNR: 51.307 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 51.430 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 51.394 (Best: 54.937 @epoch 11)
Forward: 16.32s

Saving...
Total: 16.46s

[Epoch 13]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5455]	20.1+77.0s
[3200/4440]	[L1: 0.5414]	20.6+74.8s

Evaluation:
[FFHQ x4]	PSNR: 53.249 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 53.381 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 53.309 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 53.283 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 53.291 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 53.220 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 53.376 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 53.348 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 53.292 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 53.140 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 53.294 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 53.190 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 53.274 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 53.120 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 53.225 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 53.310 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 53.229 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 53.368 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 53.235 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 53.368 (Best: 55.265 @epoch 7)
[FFHQ x4]	PSNR: 53.232 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 53.391 (Best: 55.425 @epoch 7)
[FFHQ x4]	PSNR: 53.130 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 53.224 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 53.297 (Best: 54.937 @epoch 11)
Forward: 19.57s

Saving...
Total: 20.06s

[Epoch 14]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6438]	20.2+77.2s
[3200/4440]	[L1: 0.6488]	20.7+74.5s

Evaluation:
[FFHQ x4]	PSNR: 55.012 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 54.759 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 54.769 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 54.795 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 54.602 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 54.619 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 54.666 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 53.909 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 54.195 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 54.240 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.617 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 54.509 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.203 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.573 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 54.075 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.113 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 53.895 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 54.828 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 53.966 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 55.354 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 54.550 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 55.502 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 53.484 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 54.459 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 54.595 (Best: 54.937 @epoch 11)
Forward: 18.70s

Saving...
Total: 19.15s

[Epoch 15]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6256]	20.7+77.2s
[3200/4440]	[L1: 0.6449]	20.6+75.2s

Evaluation:
[FFHQ x4]	PSNR: 46.716 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 46.770 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 46.740 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 46.754 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 46.791 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 46.809 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 46.740 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 46.732 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 46.771 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 46.730 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 46.745 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 46.791 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 46.738 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 46.792 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 46.777 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 46.767 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 46.722 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 46.704 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 46.769 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 46.709 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 46.814 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 46.707 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 46.733 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 46.771 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 46.712 (Best: 54.937 @epoch 11)
Forward: 18.43s

Saving...
Total: 18.86s

[Epoch 16]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6946]	19.7+76.9s
[3200/4440]	[L1: 0.6570]	18.3+73.1s

Evaluation:
[FFHQ x4]	PSNR: 53.105 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 53.092 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 53.110 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 53.094 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 53.040 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 53.053 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 53.019 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 52.826 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 52.931 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 52.915 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 52.954 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 53.010 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 52.895 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 53.057 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 52.853 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 52.908 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 52.839 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 53.075 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 52.864 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 53.197 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 53.060 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 53.218 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 52.790 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 53.030 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 53.055 (Best: 54.937 @epoch 11)
Forward: 8.93s

Saving...
Total: 9.08s

[Epoch 17]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5974]	20.0+77.2s
[3200/4440]	[L1: 0.6387]	20.4+74.0s

Evaluation:
[FFHQ x4]	PSNR: 53.074 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 53.019 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 53.042 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 53.030 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 53.028 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 53.000 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 53.012 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 52.846 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 52.962 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 53.008 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 52.956 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 53.021 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 52.980 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 53.027 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 52.950 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 52.932 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 52.920 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 52.989 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 52.929 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 53.078 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 53.049 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 52.989 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 52.725 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 53.022 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 53.014 (Best: 54.937 @epoch 11)
Forward: 18.52s

Saving...
Total: 18.86s

[Epoch 18]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6522]	20.6+76.6s
[3200/4440]	[L1: 0.6642]	20.4+73.8s

Evaluation:
[FFHQ x4]	PSNR: 54.890 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 54.745 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 54.685 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 54.674 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 54.568 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 54.519 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 54.535 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 53.984 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 54.140 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 54.077 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.471 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 54.328 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.082 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.469 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 53.949 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.115 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 53.761 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 54.744 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 53.932 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 55.168 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 54.426 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 55.447 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 53.595 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 54.415 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 54.533 (Best: 54.937 @epoch 11)
Forward: 19.22s

Saving...
Total: 19.60s

[Epoch 19]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.9258]	21.0+77.9s
[3200/4440]	[L1: 0.8957]	20.8+75.5s

Evaluation:
[FFHQ x4]	PSNR: 45.332 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 45.479 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 45.445 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 45.359 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 45.285 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 45.297 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 45.468 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 45.537 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 45.286 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 45.214 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 45.375 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 45.200 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 45.327 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 45.185 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 45.225 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 45.375 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 45.444 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 45.594 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 45.365 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 45.544 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 45.234 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 45.675 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 45.521 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 45.336 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 45.456 (Best: 54.937 @epoch 11)
Forward: 19.35s

Saving...
Total: 19.95s

[Epoch 20]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7966]	20.9+77.7s
[3200/4440]	[L1: 0.7802]	20.5+74.1s

Evaluation:
[FFHQ x4]	PSNR: 47.625 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 47.782 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 47.646 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 47.716 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 47.660 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 47.589 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 47.512 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 47.519 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 47.600 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 47.386 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 47.571 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 47.455 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 47.427 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 47.535 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 47.447 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 47.538 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 47.134 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 47.586 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 47.345 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 47.681 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 47.589 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 47.771 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 47.444 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 47.528 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 47.605 (Best: 54.937 @epoch 11)
Forward: 18.78s

Saving...
Total: 19.27s

[Epoch 21]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7236]	20.8+77.2s
[3200/4440]	[L1: 0.7146]	20.7+74.8s

Evaluation:
[FFHQ x4]	PSNR: 54.917 (Best: 55.109 @epoch 11)
[FFHQ x4]	PSNR: 54.788 (Best: 54.826 @epoch 11)
[FFHQ x4]	PSNR: 54.717 (Best: 54.914 @epoch 11)
[FFHQ x4]	PSNR: 54.685 (Best: 54.895 @epoch 11)
[FFHQ x4]	PSNR: 54.598 (Best: 54.808 @epoch 11)
[FFHQ x4]	PSNR: 54.529 (Best: 54.731 @epoch 11)
[FFHQ x4]	PSNR: 54.556 (Best: 54.868 @epoch 11)
[FFHQ x4]	PSNR: 54.028 (Best: 54.576 @epoch 11)
[FFHQ x4]	PSNR: 54.156 (Best: 54.648 @epoch 11)
[FFHQ x4]	PSNR: 54.097 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.484 (Best: 54.697 @epoch 11)
[FFHQ x4]	PSNR: 54.326 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.107 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.492 (Best: 54.767 @epoch 11)
[FFHQ x4]	PSNR: 53.979 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.169 (Best: 54.619 @epoch 11)
[FFHQ x4]	PSNR: 53.791 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 54.788 (Best: 55.032 @epoch 11)
[FFHQ x4]	PSNR: 53.980 (Best: 54.604 @epoch 11)
[FFHQ x4]	PSNR: 55.171 (Best: 55.354 @epoch 14)
[FFHQ x4]	PSNR: 54.431 (Best: 54.732 @epoch 11)
[FFHQ x4]	PSNR: 55.476 (Best: 55.502 @epoch 14)
[FFHQ x4]	PSNR: 53.649 (Best: 54.268 @epoch 11)
[FFHQ x4]	PSNR: 54.466 (Best: 54.825 @epoch 11)
[FFHQ x4]	PSNR: 54.565 (Best: 54.937 @epoch 11)
Forward: 19.73s

Saving...
Total: 20.17s

[Epoch 22]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6777]	21.0+77.6s
[3200/4440]	[L1: 0.6713]	20.6+74.2s

Evaluation:
[FFHQ x4]	PSNR: 55.317 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 55.365 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 55.214 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 55.190 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 55.195 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 54.919 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 55.017 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 55.074 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 54.847 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 54.460 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.909 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 54.628 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.658 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.877 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 54.522 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.898 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 54.401 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 55.376 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 54.615 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 55.484 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 54.851 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 55.963 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 54.780 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 55.048 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 55.159 (Best: 55.159 @epoch 22)
Forward: 19.33s

Saving...
Total: 19.80s

[Epoch 23]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6456]	20.9+77.4s
[3200/4440]	[L1: 0.6410]	20.7+74.5s

Evaluation:
[FFHQ x4]	PSNR: 49.464 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 49.325 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 49.354 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 49.456 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 49.583 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 49.534 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 49.294 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 49.172 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 49.407 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 49.375 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 49.319 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 49.539 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 49.257 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 49.563 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 49.314 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 49.323 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 49.081 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 49.184 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 49.364 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 49.330 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 49.491 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 49.278 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 49.020 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 49.463 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 49.299 (Best: 55.159 @epoch 22)
Forward: 19.32s

Saving...
Total: 19.74s

[Epoch 24]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6249]	21.2+78.1s
[3200/4440]	[L1: 0.6199]	20.6+74.2s

Evaluation:
[FFHQ x4]	PSNR: 50.945 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 50.801 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 50.878 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 50.813 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 51.016 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 51.121 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 50.912 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 50.545 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 50.871 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 51.364 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 50.882 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 51.287 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 51.019 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 51.230 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 51.231 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 50.963 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 51.453 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 50.627 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 51.133 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 50.676 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 51.243 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 50.423 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 50.492 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 51.023 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 50.686 (Best: 55.159 @epoch 22)
Forward: 19.09s

Saving...
Total: 19.45s

[Epoch 25]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6049]	21.1+77.5s
[3200/4440]	[L1: 0.6023]	21.0+75.4s

Evaluation:
[FFHQ x4]	PSNR: 54.860 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 54.690 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 54.640 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 54.646 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 54.512 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 54.482 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 54.494 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 53.874 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 54.083 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 54.040 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.450 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 54.315 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.041 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.434 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 53.918 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.034 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 53.718 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 54.701 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 53.866 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 55.165 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 54.401 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 55.394 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 53.471 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 54.368 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 54.469 (Best: 55.159 @epoch 22)
Forward: 8.93s

Saving...
Total: 9.07s

[Epoch 26]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6012]	20.0+76.9s
[3200/4440]	[L1: 0.5939]	19.7+74.0s

Evaluation:
[FFHQ x4]	PSNR: 55.258 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 55.269 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 55.116 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 55.095 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 55.087 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 54.847 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 54.946 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 54.811 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 54.702 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 54.424 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.821 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 54.591 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.543 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.828 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 54.377 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.725 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 54.221 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 55.305 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 54.522 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 55.464 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 54.757 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 55.870 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 54.460 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 54.946 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 55.079 (Best: 55.159 @epoch 22)
Forward: 19.42s

Saving...
Total: 19.84s

[Epoch 27]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5788]	20.9+77.6s
[3200/4440]	[L1: 0.5765]	20.5+73.9s

Evaluation:
[FFHQ x4]	PSNR: 50.782 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 50.621 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 50.686 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 50.679 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 50.863 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 50.949 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 50.725 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 50.448 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 50.750 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 51.095 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 50.710 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 51.072 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 50.833 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 51.030 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 51.032 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 50.766 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 51.129 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 50.454 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 50.876 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 50.520 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 51.061 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 50.296 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 50.378 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 50.867 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 50.554 (Best: 55.159 @epoch 22)
Forward: 15.14s

Saving...
Total: 15.28s

[Epoch 28]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5683]	19.1+76.1s
[3200/4440]	[L1: 0.5662]	20.5+74.7s

Evaluation:
[FFHQ x4]	PSNR: 51.225 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 51.112 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 51.191 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 51.104 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 51.320 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 51.376 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 51.289 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 51.009 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 51.241 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 51.698 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 51.234 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 51.560 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 51.412 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 51.546 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 51.596 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 51.340 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 51.857 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 50.955 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 51.489 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 50.933 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 51.544 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 50.717 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 50.984 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 51.357 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 51.026 (Best: 55.159 @epoch 22)
Forward: 8.96s

Saving...
Total: 9.09s

[Epoch 29]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5570]	19.8+76.8s
[3200/4440]	[L1: 0.5569]	20.3+73.8s

Evaluation:
[FFHQ x4]	PSNR: 55.058 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 54.999 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 54.884 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 54.806 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 54.831 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 54.630 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 54.688 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 54.398 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 54.344 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 54.211 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.563 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 54.380 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.238 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.624 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 54.098 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.447 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 53.944 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 55.034 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 54.285 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 55.226 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 54.502 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 55.625 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 54.013 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 54.721 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 54.759 (Best: 55.159 @epoch 22)
Forward: 18.86s

Saving...
Total: 19.30s

[Epoch 30]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5671]	20.1+76.9s
[3200/4440]	[L1: 0.5581]	18.9+73.6s

Evaluation:
[FFHQ x4]	PSNR: 55.145 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 55.114 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 54.994 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 54.956 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 54.910 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 54.746 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 54.815 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 54.523 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 54.515 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 54.313 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.705 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 54.505 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.404 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.714 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 54.252 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.533 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 54.083 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 55.116 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 54.337 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 55.373 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 54.653 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 55.735 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 54.175 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 54.775 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 54.902 (Best: 55.159 @epoch 22)
Forward: 19.33s

Saving...
Total: 19.93s

[Epoch 31]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5432]	20.8+76.9s
[3200/4440]	[L1: 0.5425]	20.6+74.4s

Evaluation:
[FFHQ x4]	PSNR: 51.405 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 51.328 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 51.400 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 51.309 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 51.492 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 51.556 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 51.525 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 51.232 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 51.496 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 51.869 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 51.478 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 51.737 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 51.656 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 51.727 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 51.836 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 51.540 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 52.028 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 51.204 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 51.683 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 51.171 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 51.738 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 50.953 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 51.245 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 51.556 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 51.271 (Best: 55.159 @epoch 22)
Forward: 19.40s

Saving...
Total: 19.88s

[Epoch 32]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5365]	21.1+78.8s
[3200/4440]	[L1: 0.5360]	20.1+74.2s

Evaluation:
[FFHQ x4]	PSNR: 51.432 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 51.375 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 51.458 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 51.374 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 51.533 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 51.608 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 51.599 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 51.251 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 51.573 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 51.972 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 51.570 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 51.827 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 51.768 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 51.797 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 51.955 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 51.597 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 52.141 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 51.229 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 51.748 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 51.220 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 51.835 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 50.964 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 51.304 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 51.599 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 51.314 (Best: 55.159 @epoch 22)
Forward: 19.38s

Saving...
Total: 19.82s

[Epoch 33]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5306]	20.9+77.5s
[3200/4440]	[L1: 0.5292]	20.6+74.5s

Evaluation:
[FFHQ x4]	PSNR: 54.928 (Best: 55.317 @epoch 22)
[FFHQ x4]	PSNR: 54.795 (Best: 55.365 @epoch 22)
[FFHQ x4]	PSNR: 54.732 (Best: 55.214 @epoch 22)
[FFHQ x4]	PSNR: 54.713 (Best: 55.190 @epoch 22)
[FFHQ x4]	PSNR: 54.608 (Best: 55.195 @epoch 22)
[FFHQ x4]	PSNR: 54.553 (Best: 54.919 @epoch 22)
[FFHQ x4]	PSNR: 54.577 (Best: 55.017 @epoch 22)
[FFHQ x4]	PSNR: 54.052 (Best: 55.074 @epoch 22)
[FFHQ x4]	PSNR: 54.192 (Best: 54.847 @epoch 22)
[FFHQ x4]	PSNR: 54.114 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.510 (Best: 54.909 @epoch 22)
[FFHQ x4]	PSNR: 54.348 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.138 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.506 (Best: 54.877 @epoch 22)
[FFHQ x4]	PSNR: 54.008 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.182 (Best: 54.898 @epoch 22)
[FFHQ x4]	PSNR: 53.818 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 54.786 (Best: 55.376 @epoch 22)
[FFHQ x4]	PSNR: 53.974 (Best: 54.615 @epoch 22)
[FFHQ x4]	PSNR: 55.194 (Best: 55.484 @epoch 22)
[FFHQ x4]	PSNR: 54.463 (Best: 54.851 @epoch 22)
[FFHQ x4]	PSNR: 55.498 (Best: 55.963 @epoch 22)
[FFHQ x4]	PSNR: 53.689 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 54.465 (Best: 55.048 @epoch 22)
[FFHQ x4]	PSNR: 54.586 (Best: 55.159 @epoch 22)
Forward: 19.85s

Saving...
Total: 20.21s

[Epoch 34]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5239]	21.3+77.7s
[3200/4440]	[L1: 0.5242]	20.8+74.7s

Evaluation:
[FFHQ x4]	PSNR: 55.342 (Best: 55.342 @epoch 34)
[FFHQ x4]	PSNR: 55.392 (Best: 55.392 @epoch 34)
[FFHQ x4]	PSNR: 55.231 (Best: 55.231 @epoch 34)
[FFHQ x4]	PSNR: 55.202 (Best: 55.202 @epoch 34)
[FFHQ x4]	PSNR: 55.222 (Best: 55.222 @epoch 34)
[FFHQ x4]	PSNR: 54.929 (Best: 54.929 @epoch 34)
[FFHQ x4]	PSNR: 55.039 (Best: 55.039 @epoch 34)
[FFHQ x4]	PSNR: 55.084 (Best: 55.084 @epoch 34)
[FFHQ x4]	PSNR: 54.862 (Best: 54.862 @epoch 34)
[FFHQ x4]	PSNR: 54.489 (Best: 54.670 @epoch 11)
[FFHQ x4]	PSNR: 54.922 (Best: 54.922 @epoch 34)
[FFHQ x4]	PSNR: 54.638 (Best: 54.773 @epoch 11)
[FFHQ x4]	PSNR: 54.670 (Best: 54.688 @epoch 11)
[FFHQ x4]	PSNR: 54.907 (Best: 54.907 @epoch 34)
[FFHQ x4]	PSNR: 54.523 (Best: 54.528 @epoch 11)
[FFHQ x4]	PSNR: 54.915 (Best: 54.915 @epoch 34)
[FFHQ x4]	PSNR: 54.405 (Best: 54.513 @epoch 11)
[FFHQ x4]	PSNR: 55.413 (Best: 55.413 @epoch 34)
[FFHQ x4]	PSNR: 54.650 (Best: 54.650 @epoch 34)
[FFHQ x4]	PSNR: 55.511 (Best: 55.511 @epoch 34)
[FFHQ x4]	PSNR: 54.854 (Best: 54.854 @epoch 34)
[FFHQ x4]	PSNR: 55.987 (Best: 55.987 @epoch 34)
[FFHQ x4]	PSNR: 54.773 (Best: 54.780 @epoch 22)
[FFHQ x4]	PSNR: 55.079 (Best: 55.079 @epoch 34)
[FFHQ x4]	PSNR: 55.192 (Best: 55.192 @epoch 34)
Forward: 19.60s

Saving...
Total: 19.95s

[Epoch 35]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5175]	21.2+78.8s
[3200/4440]	[L1: 0.5175]	20.9+75.1s

Evaluation:
[FFHQ x4]	PSNR: 55.132 (Best: 55.342 @epoch 34)
[FFHQ x4]	PSNR: 55.110 (Best: 55.392 @epoch 34)
[FFHQ x4]	PSNR: 55.172 (Best: 55.231 @epoch 34)
[FFHQ x4]	PSNR: 55.082 (Best: 55.202 @epoch 34)
[FFHQ x4]	PSNR: 54.954 (Best: 55.222 @epoch 34)
[FFHQ x4]	PSNR: 54.913 (Best: 54.929 @epoch 34)
[FFHQ x4]	PSNR: 55.173 (Best: 55.173 @epoch 35)
[FFHQ x4]	PSNR: 55.036 (Best: 55.084 @epoch 34)
[FFHQ x4]	PSNR: 54.976 (Best: 54.976 @epoch 35)
[FFHQ x4]	PSNR: 54.954 (Best: 54.954 @epoch 35)
[FFHQ x4]	PSNR: 55.001 (Best: 55.001 @epoch 35)
[FFHQ x4]	PSNR: 54.901 (Best: 54.901 @epoch 35)
[FFHQ x4]	PSNR: 55.028 (Best: 55.028 @epoch 35)
[FFHQ x4]	PSNR: 54.935 (Best: 54.935 @epoch 35)
[FFHQ x4]	PSNR: 54.882 (Best: 54.882 @epoch 35)
[FFHQ x4]	PSNR: 54.971 (Best: 54.971 @epoch 35)
[FFHQ x4]	PSNR: 55.075 (Best: 55.075 @epoch 35)
[FFHQ x4]	PSNR: 55.310 (Best: 55.413 @epoch 34)
[FFHQ x4]	PSNR: 54.966 (Best: 54.966 @epoch 35)
[FFHQ x4]	PSNR: 55.318 (Best: 55.511 @epoch 34)
[FFHQ x4]	PSNR: 54.925 (Best: 54.925 @epoch 35)
[FFHQ x4]	PSNR: 55.347 (Best: 55.987 @epoch 34)
[FFHQ x4]	PSNR: 54.929 (Best: 54.929 @epoch 35)
[FFHQ x4]	PSNR: 55.034 (Best: 55.079 @epoch 34)
[FFHQ x4]	PSNR: 55.194 (Best: 55.194 @epoch 35)
Forward: 19.17s

Saving...
Total: 19.62s

[Epoch 36]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2342]	21.3+77.9s
[3200/4440]	[L1: 0.2347]	20.9+74.8s

Evaluation:
[FFHQ x4]	PSNR: 56.006 (Best: 56.006 @epoch 36)
[FFHQ x4]	PSNR: 56.001 (Best: 56.001 @epoch 36)
[FFHQ x4]	PSNR: 55.920 (Best: 55.920 @epoch 36)
[FFHQ x4]	PSNR: 55.900 (Best: 55.900 @epoch 36)
[FFHQ x4]	PSNR: 55.736 (Best: 55.736 @epoch 36)
[FFHQ x4]	PSNR: 55.619 (Best: 55.619 @epoch 36)
[FFHQ x4]	PSNR: 55.884 (Best: 55.884 @epoch 36)
[FFHQ x4]	PSNR: 55.499 (Best: 55.499 @epoch 36)
[FFHQ x4]	PSNR: 55.521 (Best: 55.521 @epoch 36)
[FFHQ x4]	PSNR: 55.361 (Best: 55.361 @epoch 36)
[FFHQ x4]	PSNR: 55.689 (Best: 55.689 @epoch 36)
[FFHQ x4]	PSNR: 55.474 (Best: 55.474 @epoch 36)
[FFHQ x4]	PSNR: 55.522 (Best: 55.522 @epoch 36)
[FFHQ x4]	PSNR: 55.529 (Best: 55.529 @epoch 36)
[FFHQ x4]	PSNR: 55.264 (Best: 55.264 @epoch 36)
[FFHQ x4]	PSNR: 55.472 (Best: 55.472 @epoch 36)
[FFHQ x4]	PSNR: 55.247 (Best: 55.247 @epoch 36)
[FFHQ x4]	PSNR: 56.106 (Best: 56.106 @epoch 36)
[FFHQ x4]	PSNR: 55.278 (Best: 55.278 @epoch 36)
[FFHQ x4]	PSNR: 56.359 (Best: 56.359 @epoch 36)
[FFHQ x4]	PSNR: 55.573 (Best: 55.573 @epoch 36)
[FFHQ x4]	PSNR: 56.546 (Best: 56.546 @epoch 36)
[FFHQ x4]	PSNR: 55.072 (Best: 55.072 @epoch 36)
[FFHQ x4]	PSNR: 55.631 (Best: 55.631 @epoch 36)
[FFHQ x4]	PSNR: 55.888 (Best: 55.888 @epoch 36)
Forward: 19.23s

Saving...
Total: 19.66s

[Epoch 37]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2756]	20.9+77.8s
[3200/4440]	[L1: 0.2658]	20.7+75.2s

Evaluation:
[FFHQ x4]	PSNR: 56.000 (Best: 56.006 @epoch 36)
[FFHQ x4]	PSNR: 56.246 (Best: 56.246 @epoch 37)
[FFHQ x4]	PSNR: 56.209 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 56.087 (Best: 56.087 @epoch 37)
[FFHQ x4]	PSNR: 55.914 (Best: 55.914 @epoch 37)
[FFHQ x4]	PSNR: 55.755 (Best: 55.755 @epoch 37)
[FFHQ x4]	PSNR: 56.186 (Best: 56.186 @epoch 37)
[FFHQ x4]	PSNR: 56.316 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.990 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.767 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.998 (Best: 55.998 @epoch 37)
[FFHQ x4]	PSNR: 55.652 (Best: 55.652 @epoch 37)
[FFHQ x4]	PSNR: 56.004 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.773 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.790 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 56.049 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 56.001 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 56.359 (Best: 56.359 @epoch 37)
[FFHQ x4]	PSNR: 55.939 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 56.309 (Best: 56.359 @epoch 36)
[FFHQ x4]	PSNR: 55.783 (Best: 55.783 @epoch 37)
[FFHQ x4]	PSNR: 56.461 (Best: 56.546 @epoch 36)
[FFHQ x4]	PSNR: 56.338 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 56.007 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 56.190 (Best: 56.190 @epoch 37)
Forward: 19.83s

Saving...
Total: 20.36s

[Epoch 38]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3149]	21.1+78.0s
[3200/4440]	[L1: 0.3340]	21.0+74.9s

Evaluation:
[FFHQ x4]	PSNR: 56.074 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 56.294 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 56.189 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 56.116 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.976 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.821 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 56.247 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 56.251 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.968 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.703 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 56.037 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 55.703 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 56.000 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.678 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.718 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 56.014 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 55.925 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 56.461 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 55.879 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 56.487 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.808 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.615 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 55.980 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.966 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 56.234 (Best: 56.234 @epoch 38)
Forward: 18.84s

Saving...
Total: 19.30s

[Epoch 39]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3559]	21.9+80.3s
[3200/4440]	[L1: 0.3411]	21.4+77.1s

Evaluation:
[FFHQ x4]	PSNR: 55.720 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.763 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.703 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.649 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.544 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.392 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.601 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.496 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.367 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.149 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.426 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 55.220 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 55.318 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.335 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.081 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 55.385 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 55.108 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.845 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 55.213 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.978 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.336 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.202 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 55.231 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.494 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.684 (Best: 56.234 @epoch 38)
Forward: 19.04s

Saving...
Total: 19.56s

[Epoch 40]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3532]	21.5+79.9s
[3200/4440]	[L1: 0.3870]	21.5+77.5s

Evaluation:
[FFHQ x4]	PSNR: 54.956 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.218 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.107 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.959 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.823 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.904 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.975 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.784 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.669 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.483 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.862 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.600 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.655 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.669 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.454 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.748 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.697 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.225 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.552 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.390 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.777 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.644 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 54.659 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.819 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.926 (Best: 56.234 @epoch 38)
Forward: 18.95s

Saving...
Total: 19.49s

[Epoch 41]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4382]	21.4+78.7s
[3200/4440]	[L1: 0.4069]	21.3+76.2s

Evaluation:
[FFHQ x4]	PSNR: 54.224 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 54.140 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 54.164 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.180 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.140 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.063 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.082 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 53.958 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.087 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.015 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.032 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.073 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.029 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.134 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 53.977 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.014 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.828 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 54.126 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 53.937 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 54.248 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.110 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 54.211 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.890 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.127 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.156 (Best: 56.234 @epoch 38)
Forward: 19.01s

Saving...
Total: 19.44s

[Epoch 42]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4804]	21.4+78.7s
[3200/4440]	[L1: 0.4211]	20.9+74.9s

Evaluation:
[FFHQ x4]	PSNR: 54.416 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 54.162 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 54.228 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.241 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.326 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.217 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.235 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.154 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.224 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.289 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.165 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.312 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.264 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.275 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.228 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.189 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.178 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 54.205 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.208 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 54.299 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.312 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 54.146 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.909 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.319 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.261 (Best: 56.234 @epoch 38)
Forward: 19.19s

Saving...
Total: 20.01s

[Epoch 43]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4215]	21.2+78.6s
[3200/4440]	[L1: 0.4103]	20.5+74.7s

Evaluation:
[FFHQ x4]	PSNR: 55.767 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 56.071 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.946 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.846 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.657 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.655 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.946 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.837 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.646 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.386 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.774 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 55.470 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 55.656 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.441 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.424 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 55.683 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 55.664 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 56.173 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 55.516 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 56.267 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.597 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.413 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 55.599 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.636 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.884 (Best: 56.234 @epoch 38)
Forward: 13.62s

Saving...
Total: 13.76s

[Epoch 44]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4646]	20.1+77.6s
[3200/4440]	[L1: 0.4499]	21.0+75.1s

Evaluation:
[FFHQ x4]	PSNR: 54.744 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 54.745 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 54.676 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.635 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.518 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.536 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.495 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.063 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.211 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.113 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.451 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.347 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.136 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.469 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.007 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.201 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.922 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 54.703 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.029 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.048 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.447 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.244 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.831 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.420 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.507 (Best: 56.234 @epoch 38)
Forward: 19.50s

Saving...
Total: 20.01s

[Epoch 45]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3817]	20.9+77.3s
[3200/4440]	[L1: 0.3985]	20.3+74.0s

Evaluation:
[FFHQ x4]	PSNR: 42.954 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 42.973 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 42.954 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 42.963 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 42.962 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 42.953 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 42.929 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 42.921 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 42.940 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 42.910 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 42.932 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 42.932 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 42.919 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 42.929 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 42.913 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 42.927 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 42.860 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 42.940 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 42.910 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 42.963 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 42.947 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 42.966 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 42.893 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 42.936 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 42.943 (Best: 56.234 @epoch 38)
Forward: 19.78s

Saving...
Total: 20.25s

[Epoch 46]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.7741]	20.7+78.2s
[3200/4440]	[L1: 0.5948]	18.7+74.3s

Evaluation:
[FFHQ x4]	PSNR: 54.986 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.059 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.041 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.005 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.884 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.826 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.964 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.670 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.777 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.656 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.865 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.734 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.741 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.806 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.581 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.709 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.571 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.054 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.573 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.254 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.817 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.297 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 54.467 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.821 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.977 (Best: 56.234 @epoch 38)
Forward: 8.95s

Saving...
Total: 9.09s

[Epoch 47]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3728]	19.1+77.6s
[3200/4440]	[L1: 0.4044]	20.4+75.4s

Evaluation:
[FFHQ x4]	PSNR: 50.921 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 50.815 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 50.887 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 50.834 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 50.887 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 50.887 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 50.949 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 50.792 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 50.894 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 51.080 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 50.893 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 51.029 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 51.009 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 50.987 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 51.037 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 50.906 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 51.118 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 50.815 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 51.018 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 50.818 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 50.979 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 50.665 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 50.744 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 50.942 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 50.848 (Best: 56.234 @epoch 38)
Forward: 8.88s

Saving...
Total: 9.02s

[Epoch 48]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3848]	18.5+75.9s
[3200/4440]	[L1: 0.4869]	18.4+73.4s

Evaluation:
[FFHQ x4]	PSNR: 54.068 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 54.179 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 54.014 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.072 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.018 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 53.956 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 53.952 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 53.729 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 53.806 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 53.510 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 53.916 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 53.770 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 53.668 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 53.797 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 53.528 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 53.740 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.378 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 54.070 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 53.541 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 54.348 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 53.868 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 54.516 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.346 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.802 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 53.950 (Best: 56.234 @epoch 38)
Forward: 8.92s

Saving...
Total: 9.07s

[Epoch 49]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3683]	18.6+75.8s
[3200/4440]	[L1: 0.3902]	18.4+73.0s

Evaluation:
[FFHQ x4]	PSNR: 54.047 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 53.980 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 53.973 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 53.981 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 53.871 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 53.876 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 53.845 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 53.494 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 53.694 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 53.626 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 53.794 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 53.812 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 53.621 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 53.869 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 53.551 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 53.625 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.417 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 53.957 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 53.499 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 54.237 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 53.857 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 54.282 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.308 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.801 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 53.881 (Best: 56.234 @epoch 38)
Forward: 9.25s

Saving...
Total: 9.40s

[Epoch 50]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3849]	18.7+80.4s
[3200/4440]	[L1: 0.5571]	18.2+73.2s

Evaluation:
[FFHQ x4]	PSNR: 48.493 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 48.544 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 48.453 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 48.558 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 48.519 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 48.471 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 48.372 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 48.285 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 48.474 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 48.285 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 48.410 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 48.421 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 48.305 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 48.443 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 48.332 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 48.388 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 48.018 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 48.336 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 48.278 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 48.426 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 48.444 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 48.453 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 48.168 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 48.370 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 48.413 (Best: 56.234 @epoch 38)
Forward: 8.88s

Saving...
Total: 9.03s

[Epoch 51]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.6521]	18.6+75.8s
[3200/4440]	[L1: 0.6357]	18.4+73.0s

Evaluation:
[FFHQ x4]	PSNR: 50.371 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 50.136 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 50.200 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 50.266 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 50.457 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 50.464 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 50.221 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 50.019 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 50.307 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 50.519 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 50.215 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 50.570 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 50.269 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 50.532 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 50.431 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 50.230 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 50.387 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 50.033 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 50.321 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 50.131 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 50.569 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 49.944 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 49.828 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 50.412 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 50.148 (Best: 56.234 @epoch 38)
Forward: 8.90s

Saving...
Total: 9.05s

[Epoch 52]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5767]	18.6+75.8s
[3200/4440]	[L1: 0.5678]	18.4+72.9s

Evaluation:
[FFHQ x4]	PSNR: 55.313 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.338 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.187 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.192 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.109 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.923 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.038 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.825 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.817 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.499 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.925 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.683 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.668 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.890 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.496 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.754 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.297 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.320 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.482 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.581 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.876 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.963 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 54.501 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.951 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.168 (Best: 56.234 @epoch 38)
Forward: 8.90s

Saving...
Total: 9.05s

[Epoch 53]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5332]	18.5+75.8s
[3200/4440]	[L1: 0.5283]	18.4+73.1s

Evaluation:
[FFHQ x4]	PSNR: 55.553 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.678 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.483 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.498 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.478 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.151 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.301 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.487 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.232 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.716 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.195 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.858 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.986 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.133 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.828 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 55.209 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.686 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.692 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.899 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.779 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.113 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.255 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 55.234 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.317 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.509 (Best: 56.234 @epoch 38)
Forward: 8.88s

Saving...
Total: 9.03s

[Epoch 54]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5057]	18.6+75.6s
[3200/4440]	[L1: 0.5025]	18.3+72.9s

Evaluation:
[FFHQ x4]	PSNR: 51.701 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 51.722 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 51.781 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 51.676 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 51.813 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 51.871 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 52.031 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 51.666 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 52.010 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 52.282 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 51.989 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 52.101 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 52.182 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 52.106 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 52.404 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 51.994 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 52.439 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 51.589 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 52.130 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 51.577 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 52.146 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 51.315 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 51.817 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 51.952 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 51.681 (Best: 56.234 @epoch 38)
Forward: 8.87s

Saving...
Total: 9.17s

[Epoch 55]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4866]	18.6+75.8s
[3200/4440]	[L1: 0.4839]	18.4+72.8s

Evaluation:
[FFHQ x4]	PSNR: 51.959 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 51.980 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 52.116 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 52.040 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 52.101 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 52.092 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 52.410 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 52.293 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 52.486 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 52.527 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 52.400 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 52.262 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 52.588 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 52.364 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 52.858 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 52.408 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 52.838 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 51.859 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 52.459 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 51.805 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 52.437 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 51.604 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 52.546 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.288 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 52.084 (Best: 56.234 @epoch 38)
Forward: 8.88s

Saving...
Total: 9.03s

[Epoch 56]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4729]	18.3+75.6s
[3200/4440]	[L1: 0.4703]	18.3+72.8s

Evaluation:
[FFHQ x4]	PSNR: 55.167 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.152 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.024 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.982 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.946 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.779 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.841 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.590 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.573 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.336 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.721 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.515 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.440 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.748 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.292 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.588 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.108 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.132 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.352 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.374 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.686 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.790 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 54.280 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.805 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.945 (Best: 56.234 @epoch 38)
Forward: 8.89s

Saving...
Total: 9.04s

[Epoch 57]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4733]	18.6+75.7s
[3200/4440]	[L1: 0.4700]	18.3+72.9s

Evaluation:
[FFHQ x4]	PSNR: 55.367 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.426 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.261 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.242 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.239 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.970 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.065 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.099 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.914 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.518 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.948 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.674 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.705 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.943 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.554 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.930 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.407 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.431 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.668 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.554 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.892 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.024 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 54.812 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.091 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.226 (Best: 56.234 @epoch 38)
Forward: 8.87s

Saving...
Total: 9.01s

[Epoch 58]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4558]	18.6+75.6s
[3200/4440]	[L1: 0.4537]	18.4+72.8s

Evaluation:
[FFHQ x4]	PSNR: 52.037 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 52.037 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 52.180 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 52.099 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 52.143 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 52.148 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 52.479 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 52.366 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 52.543 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 52.557 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 52.453 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 52.306 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 52.631 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 52.404 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 52.901 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 52.454 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 52.909 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 51.979 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 52.502 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 51.900 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 52.476 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 51.734 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 52.623 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.343 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 52.169 (Best: 56.234 @epoch 38)
Forward: 8.87s

Saving...
Total: 9.02s

[Epoch 59]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4491]	18.6+75.7s
[3200/4440]	[L1: 0.4468]	18.3+72.9s

Evaluation:
[FFHQ x4]	PSNR: 52.099 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 52.107 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 52.242 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 52.150 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 52.236 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 52.191 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 52.545 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 52.633 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 52.612 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 52.606 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 52.504 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 52.319 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 52.699 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 52.463 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 52.964 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 52.602 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 52.969 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 52.062 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 52.653 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 51.906 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 52.495 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 51.774 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 52.900 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.462 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 52.238 (Best: 56.234 @epoch 38)
Forward: 8.91s

Saving...
Total: 9.05s

[Epoch 60]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4422]	18.5+75.7s
[3200/4440]	[L1: 0.4414]	18.4+72.6s

Evaluation:
[FFHQ x4]	PSNR: 55.008 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 54.925 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 54.824 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.764 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.726 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.607 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.640 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.230 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.272 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.178 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.531 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.365 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.191 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.585 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.044 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.338 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.864 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 54.926 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.158 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.207 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.474 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.591 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.876 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.608 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.702 (Best: 56.234 @epoch 38)
Forward: 8.81s

Saving...
Total: 8.96s

[Epoch 61]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4393]	18.4+75.3s
[3200/4440]	[L1: 0.4371]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 55.366 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.420 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.256 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.220 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.262 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.947 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.060 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.085 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.879 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.522 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.933 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.664 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.680 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.941 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.518 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.930 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.406 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.455 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.685 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.548 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.867 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.021 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 54.758 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.119 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.232 (Best: 56.234 @epoch 38)
Forward: 8.82s

Saving...
Total: 8.97s

[Epoch 62]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4349]	18.5+75.3s
[3200/4440]	[L1: 0.4335]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 52.121 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 52.130 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 52.236 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 52.124 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 52.204 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 52.224 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 52.496 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 52.395 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 52.487 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 52.581 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 52.439 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 52.375 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 52.615 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 52.442 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 52.820 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 52.485 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 52.907 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 52.099 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 52.590 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 51.998 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 52.477 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 51.833 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 52.575 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.395 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 52.197 (Best: 56.234 @epoch 38)
Forward: 8.83s

Saving...
Total: 8.98s

[Epoch 63]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4365]	18.4+75.3s
[3200/4440]	[L1: 0.4321]	18.2+72.8s

Evaluation:
[FFHQ x4]	PSNR: 52.209 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 52.206 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 52.336 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 52.243 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 52.327 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 52.277 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 52.640 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 52.827 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 52.678 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 52.654 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 52.574 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 52.386 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 52.755 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 52.529 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 53.009 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 52.700 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.062 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 52.230 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 52.768 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 52.026 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 52.544 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 51.930 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.057 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.567 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 52.358 (Best: 56.234 @epoch 38)
Forward: 8.92s

Saving...
Total: 9.07s

[Epoch 64]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4262]	18.5+75.7s
[3200/4440]	[L1: 0.4255]	18.4+73.0s

Evaluation:
[FFHQ x4]	PSNR: 54.988 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 54.906 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 54.789 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 54.717 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 54.716 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.573 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.591 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.176 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.199 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.153 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.476 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.331 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.126 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.565 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 53.966 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.310 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.798 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 54.941 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.191 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.173 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.407 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.555 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.828 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.602 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 54.659 (Best: 56.234 @epoch 38)
Forward: 8.91s

Saving...
Total: 9.06s

[Epoch 65]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4229]	18.6+75.8s
[3200/4440]	[L1: 0.4224]	18.3+73.0s

Evaluation:
[FFHQ x4]	PSNR: 55.255 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.275 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.128 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.076 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.104 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 54.846 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 54.927 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 54.843 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 54.698 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 54.410 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 54.795 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 54.564 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 54.530 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 54.832 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 54.377 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 54.761 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 54.241 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.296 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 54.539 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.426 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 54.746 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.889 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 54.518 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.967 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.066 (Best: 56.234 @epoch 38)
Forward: 8.88s

Saving...
Total: 9.03s

[Epoch 66]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4240]	18.7+75.7s
[3200/4440]	[L1: 0.4226]	18.3+73.0s

Evaluation:
[FFHQ x4]	PSNR: 53.157 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 53.250 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 53.316 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 53.173 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 53.176 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 53.197 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 53.519 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 53.593 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 53.404 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 53.381 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 53.428 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 53.259 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 53.516 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 53.281 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 53.587 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 53.485 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 53.824 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 53.349 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 53.600 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 53.222 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 53.337 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 53.155 (Best: 56.615 @epoch 38)
[FFHQ x4]	PSNR: 53.726 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.371 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 53.323 (Best: 56.234 @epoch 38)
Forward: 8.91s

Saving...
Total: 9.12s

[Epoch 67]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2291]	18.7+75.8s
[3200/4440]	[L1: 0.2107]	18.4+73.0s

Evaluation:
[FFHQ x4]	PSNR: 56.059 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 56.168 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 56.062 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 56.012 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.922 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.658 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 56.002 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.931 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.721 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.428 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.778 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 55.442 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 55.657 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.578 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.353 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 55.753 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 55.427 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 56.299 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 55.552 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 56.351 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.566 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.670 (Best: 56.670 @epoch 67)
[FFHQ x4]	PSNR: 55.614 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.840 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 56.089 (Best: 56.234 @epoch 38)
Forward: 8.91s

Saving...
Total: 9.07s

[Epoch 68]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2184]	18.6+75.8s
[3200/4440]	[L1: 0.2183]	18.4+73.0s

Evaluation:
[FFHQ x4]	PSNR: 55.174 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.434 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.426 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.262 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.222 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.157 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.521 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.751 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.419 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.236 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.417 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 55.043 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 55.439 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.117 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.403 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 55.488 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 55.567 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.535 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 55.411 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 55.416 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.213 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 55.477 (Best: 56.670 @epoch 67)
[FFHQ x4]	PSNR: 55.869 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.340 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.412 (Best: 56.234 @epoch 38)
Forward: 8.90s

Saving...
Total: 9.05s

[Epoch 69]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2654]	18.6+75.8s
[3200/4440]	[L1: 0.2681]	18.3+73.0s

Evaluation:
[FFHQ x4]	PSNR: 55.787 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 55.983 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.846 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.772 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.643 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.482 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.672 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.535 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.468 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.162 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.546 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 55.248 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 55.349 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.441 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.129 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 55.449 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 55.108 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 55.955 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 55.188 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 56.142 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.447 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.453 (Best: 56.670 @epoch 67)
[FFHQ x4]	PSNR: 55.418 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.562 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.748 (Best: 56.234 @epoch 38)
Forward: 8.89s

Saving...
Total: 9.04s

[Epoch 70]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3607]	18.6+75.8s
[3200/4440]	[L1: 0.3102]	18.4+72.8s

Evaluation:
[FFHQ x4]	PSNR: 55.948 (Best: 56.074 @epoch 38)
[FFHQ x4]	PSNR: 56.154 (Best: 56.294 @epoch 38)
[FFHQ x4]	PSNR: 55.947 (Best: 56.209 @epoch 37)
[FFHQ x4]	PSNR: 55.973 (Best: 56.116 @epoch 38)
[FFHQ x4]	PSNR: 55.798 (Best: 55.976 @epoch 38)
[FFHQ x4]	PSNR: 55.656 (Best: 55.821 @epoch 38)
[FFHQ x4]	PSNR: 55.877 (Best: 56.247 @epoch 38)
[FFHQ x4]	PSNR: 55.703 (Best: 56.316 @epoch 37)
[FFHQ x4]	PSNR: 55.662 (Best: 55.990 @epoch 37)
[FFHQ x4]	PSNR: 55.304 (Best: 55.767 @epoch 37)
[FFHQ x4]	PSNR: 55.748 (Best: 56.037 @epoch 38)
[FFHQ x4]	PSNR: 55.442 (Best: 55.703 @epoch 38)
[FFHQ x4]	PSNR: 55.561 (Best: 56.004 @epoch 37)
[FFHQ x4]	PSNR: 55.533 (Best: 55.773 @epoch 37)
[FFHQ x4]	PSNR: 55.323 (Best: 55.790 @epoch 37)
[FFHQ x4]	PSNR: 55.569 (Best: 56.049 @epoch 37)
[FFHQ x4]	PSNR: 55.249 (Best: 56.001 @epoch 37)
[FFHQ x4]	PSNR: 56.125 (Best: 56.461 @epoch 38)
[FFHQ x4]	PSNR: 55.289 (Best: 55.939 @epoch 37)
[FFHQ x4]	PSNR: 56.369 (Best: 56.487 @epoch 38)
[FFHQ x4]	PSNR: 55.636 (Best: 55.808 @epoch 38)
[FFHQ x4]	PSNR: 56.618 (Best: 56.670 @epoch 67)
[FFHQ x4]	PSNR: 55.356 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.640 (Best: 56.007 @epoch 37)
[FFHQ x4]	PSNR: 55.926 (Best: 56.234 @epoch 38)
Forward: 8.83s

Saving...
Total: 8.98s

[Epoch 71]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2735]	18.5+75.4s
[3200/4440]	[L1: 0.4449]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 56.719 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 56.580 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 56.582 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 56.531 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 56.381 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 56.163 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 56.560 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 56.590 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 56.328 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 56.101 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 56.280 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 56.137 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 56.357 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 56.154 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 56.071 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 56.331 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 56.164 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 56.899 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 56.251 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 56.925 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 56.183 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 57.135 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 56.314 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 56.425 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 56.657 (Best: 56.657 @epoch 71)
Forward: 8.83s

Saving...
Total: 8.99s

[Epoch 72]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2703]	18.5+75.4s
[3200/4440]	[L1: 0.2725]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 54.688 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 54.816 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 54.770 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 54.703 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 54.611 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.585 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.735 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.483 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.506 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.379 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.614 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.488 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.487 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.502 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.333 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.511 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.427 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 54.882 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.400 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 54.997 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.531 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.081 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.290 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.560 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 54.724 (Best: 56.657 @epoch 71)
Forward: 8.81s

Saving...
Total: 8.96s

[Epoch 73]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3600]	18.5+75.4s
[3200/4440]	[L1: 0.4010]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 55.184 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.227 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.194 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.186 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.117 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 55.000 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 55.134 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 55.288 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 55.154 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.935 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 55.046 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.967 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 55.077 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 55.049 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 55.020 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 55.134 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.946 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.299 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 55.060 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.287 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 55.052 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.354 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 55.347 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.174 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.231 (Best: 56.657 @epoch 71)
Forward: 8.83s

Saving...
Total: 8.99s

[Epoch 74]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3226]	18.5+75.4s
[3200/4440]	[L1: 0.3562]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 55.360 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.203 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.178 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.203 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.066 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 55.018 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 55.106 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.666 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.834 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.758 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.974 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.949 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.804 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.996 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.661 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.772 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.528 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.272 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.617 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.587 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.976 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.684 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.300 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.983 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.125 (Best: 56.657 @epoch 71)
Forward: 8.82s

Saving...
Total: 8.98s

[Epoch 75]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.2886]	18.5+75.4s
[3200/4440]	[L1: 0.3038]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 52.861 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 52.775 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 52.810 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 52.766 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 52.879 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 52.870 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 52.912 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 52.811 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 52.820 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 52.960 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 52.847 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 52.917 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 52.945 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 52.837 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 52.928 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 52.859 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.162 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 52.770 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 52.939 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 52.782 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 52.947 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 52.665 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 52.572 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.895 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 52.789 (Best: 56.657 @epoch 71)
Forward: 8.81s

Saving...
Total: 8.97s

[Epoch 76]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3265]	18.4+75.4s
[3200/4440]	[L1: 0.3249]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 54.951 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 54.796 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 54.744 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 54.771 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 54.623 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.591 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.624 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.024 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.227 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.162 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.569 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.433 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.177 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.537 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.033 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.154 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.854 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 54.800 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.959 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.279 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.522 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.511 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 53.623 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.459 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 54.594 (Best: 56.657 @epoch 71)
Forward: 8.82s

Saving...
Total: 8.98s

[Epoch 77]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4155]	18.5+75.4s
[3200/4440]	[L1: 0.3635]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 51.142 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 51.147 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 51.151 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 51.144 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 51.118 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 51.042 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 51.178 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 51.288 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 51.167 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 51.075 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 51.126 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 51.043 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 51.176 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 51.041 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 51.104 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 51.155 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 51.138 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 51.209 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 51.191 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 51.164 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 51.060 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 51.161 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 51.273 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 51.152 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 51.205 (Best: 56.657 @epoch 71)
Forward: 8.84s

Saving...
Total: 8.99s

[Epoch 78]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3906]	18.5+75.3s
[3200/4440]	[L1: 0.3872]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 55.015 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 54.931 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 54.843 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 54.874 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 54.690 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.719 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.742 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.105 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.339 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.256 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.711 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.565 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.321 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.609 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.168 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.268 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.034 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 54.914 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.071 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.415 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.641 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.576 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 53.657 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.520 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 54.646 (Best: 56.657 @epoch 71)
Forward: 8.81s

Saving...
Total: 8.97s

[Epoch 79]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3860]	18.4+75.4s
[3200/4440]	[L1: 0.4767]	18.2+72.7s

Evaluation:
[FFHQ x4]	PSNR: 49.587 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 49.419 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 49.453 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 49.604 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 49.757 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 49.677 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 49.437 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 49.323 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 49.557 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 49.564 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 49.461 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 49.688 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 49.377 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 49.670 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 49.428 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 49.438 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 49.163 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 49.281 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 49.552 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 49.481 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 49.607 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 49.373 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 49.091 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 49.587 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 49.440 (Best: 56.657 @epoch 71)
Forward: 8.81s

Saving...
Total: 9.03s

[Epoch 80]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5659]	18.4+75.4s
[3200/4440]	[L1: 0.5510]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 51.845 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 51.885 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 51.995 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 51.915 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 51.953 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 52.014 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 52.265 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 51.974 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 52.321 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 52.437 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 52.255 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 52.208 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 52.448 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 52.271 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 52.710 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 52.229 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 52.659 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 51.749 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 52.328 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 51.754 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 52.345 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 51.491 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 52.226 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.130 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 51.943 (Best: 56.657 @epoch 71)
Forward: 8.83s

Saving...
Total: 8.99s

[Epoch 81]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.5001]	18.4+75.4s
[3200/4440]	[L1: 0.4921]	18.2+72.6s

Evaluation:
[FFHQ x4]	PSNR: 54.787 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 54.583 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 54.540 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 54.523 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 54.367 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.401 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.386 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 53.624 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 53.915 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 53.971 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.352 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.235 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 53.932 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.347 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.795 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 53.906 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.573 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 54.576 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.735 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.095 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.290 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.341 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 53.277 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.244 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 54.390 (Best: 56.657 @epoch 71)
Forward: 8.81s

Saving...
Total: 8.96s

[Epoch 82]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4631]	18.5+75.4s
[3200/4440]	[L1: 0.4568]	18.2+72.7s

Evaluation:
[FFHQ x4]	PSNR: 55.304 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.336 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.169 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.131 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.175 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.886 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.970 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.910 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.759 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.455 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.832 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.608 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.574 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.879 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.406 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.813 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.266 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.373 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.609 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.479 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.786 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.943 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.581 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.035 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.123 (Best: 56.657 @epoch 71)
Forward: 8.76s

Saving...
Total: 8.91s

[Epoch 83]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4373]	18.5+75.1s
[3200/4440]	[L1: 0.4339]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 52.193 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 52.207 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 52.346 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 52.249 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 52.317 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 52.276 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 52.636 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 52.752 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 52.680 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 52.658 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 52.574 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 52.399 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 52.752 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 52.531 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.024 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 52.680 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.082 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 52.218 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 52.743 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 52.046 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 52.547 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 51.934 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 52.986 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.552 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 52.352 (Best: 56.657 @epoch 71)
Forward: 8.79s

Saving...
Total: 8.93s

[Epoch 84]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4204]	18.4+75.2s
[3200/4440]	[L1: 0.4180]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 53.153 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 53.194 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 53.267 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 53.071 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 53.035 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 53.088 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 53.466 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 53.833 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 53.276 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 53.201 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 53.306 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 53.120 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 53.368 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 53.164 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.465 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 53.479 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.861 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 53.555 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.663 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 53.234 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 53.142 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 53.325 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.170 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.337 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 53.329 (Best: 56.657 @epoch 71)
Forward: 8.75s

Saving...
Total: 8.88s

[Epoch 85]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4087]	18.5+75.2s
[3200/4440]	[L1: 0.4078]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 55.026 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 54.957 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 54.824 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 54.746 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 54.783 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.599 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.623 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.266 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.249 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.180 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.488 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.352 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.155 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.593 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.996 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.374 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.835 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.012 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.269 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.184 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.425 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.601 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 53.905 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.673 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 54.690 (Best: 56.657 @epoch 71)
Forward: 8.78s

Saving...
Total: 8.92s

[Epoch 86]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.4012]	18.5+75.2s
[3200/4440]	[L1: 0.4081]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 55.527 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.640 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.463 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.476 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.441 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 55.134 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 55.259 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 55.438 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 55.190 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.683 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 55.159 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.827 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.936 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 55.120 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.772 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 55.174 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.645 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.633 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.867 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.744 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 55.079 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 56.235 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 55.192 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.289 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.464 (Best: 56.657 @epoch 71)
Forward: 8.77s

Saving...
Total: 8.91s

[Epoch 87]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3943]	18.5+75.3s
[3200/4440]	[L1: 0.3935]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 52.517 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 52.541 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 52.648 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 52.500 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 52.566 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 52.529 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 52.912 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 53.234 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 52.878 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 52.821 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 52.795 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 52.614 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 52.945 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 52.757 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.164 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 52.992 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.320 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 52.709 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.114 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 52.401 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 52.710 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 52.394 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 53.551 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 52.852 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 52.683 (Best: 56.657 @epoch 71)
Forward: 8.78s

Saving...
Total: 8.91s

[Epoch 88]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3897]	18.4+75.2s
[3200/4440]	[L1: 0.3894]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 53.339 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 53.501 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 53.537 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 53.297 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 53.221 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 53.274 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 53.738 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.024 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 53.414 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 53.314 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 53.505 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 53.367 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 53.516 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 53.335 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.584 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 53.657 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.107 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 53.869 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.917 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 53.611 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 53.346 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 53.693 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.364 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.497 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 53.582 (Best: 56.657 @epoch 71)
Forward: 8.78s

Saving...
Total: 8.92s

[Epoch 89]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3859]	18.5+75.2s
[3200/4440]	[L1: 0.3852]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 55.193 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.188 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.065 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 54.982 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.047 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.778 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.836 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.757 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.581 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.342 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.711 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.489 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.420 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.776 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.269 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.714 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.194 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.216 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.492 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.330 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.641 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.825 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.412 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.927 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 54.955 (Best: 56.657 @epoch 71)
Forward: 8.76s

Saving...
Total: 8.90s

[Epoch 90]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3825]	18.4+75.2s
[3200/4440]	[L1: 0.3826]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 55.255 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.279 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.130 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.080 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.098 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.857 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.920 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.847 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.707 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.408 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.790 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.568 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.527 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.840 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.372 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.766 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.225 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.293 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.546 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.422 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.748 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.897 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.539 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.965 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.059 (Best: 56.657 @epoch 71)
Forward: 8.77s

Saving...
Total: 8.91s

[Epoch 91]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3799]	18.4+75.3s
[3200/4440]	[L1: 0.3797]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 52.832 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 52.881 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 52.960 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 52.800 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 52.810 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 52.813 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 53.199 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 53.526 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 53.079 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 53.009 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 53.053 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 52.882 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 53.148 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 52.970 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.321 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 53.230 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.609 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 53.145 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.396 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 52.834 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 52.933 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 52.874 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 53.825 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.098 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 53.013 (Best: 56.657 @epoch 71)
Forward: 8.75s

Saving...
Total: 8.94s

[Epoch 92]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3771]	18.5+75.2s
[3200/4440]	[L1: 0.3770]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 53.408 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 53.536 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 53.582 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 53.357 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 53.272 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 53.337 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 53.771 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.089 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 53.465 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 53.370 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 53.562 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 53.398 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 53.573 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 53.362 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.616 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 53.714 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.144 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 53.935 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.946 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 53.662 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 53.389 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 53.744 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.396 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.554 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 53.636 (Best: 56.657 @epoch 71)
Forward: 8.78s

Saving...
Total: 8.91s

[Epoch 93]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3781]	18.5+75.3s
[3200/4440]	[L1: 0.3771]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 55.292 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.326 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.155 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.119 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.130 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.887 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.964 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.846 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.740 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.452 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.826 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.614 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.570 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.872 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.396 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.767 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.223 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.357 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.585 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.488 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.783 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.929 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.533 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 54.987 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.118 (Best: 56.657 @epoch 71)
Forward: 8.77s

Saving...
Total: 8.91s

[Epoch 94]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3733]	18.5+75.2s
[3200/4440]	[L1: 0.3742]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 55.365 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.436 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.256 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.247 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.205 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.987 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 55.059 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 55.032 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.917 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.518 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.932 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.690 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.708 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.957 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.548 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.893 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.339 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.431 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.663 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.575 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.904 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 56.027 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.776 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.057 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.222 (Best: 56.657 @epoch 71)
Forward: 8.78s

Saving...
Total: 8.92s

[Epoch 95]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3719]	18.5+75.3s
[3200/4440]	[L1: 0.3720]	18.2+72.4s

Evaluation:
[FFHQ x4]	PSNR: 52.857 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 52.943 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 53.023 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 52.859 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 52.867 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 52.863 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 53.261 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 53.574 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 53.122 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 53.045 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 53.119 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 52.949 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 53.199 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 53.008 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.363 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 53.282 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 53.665 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 53.201 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 53.461 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 52.912 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 53.000 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 52.909 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 53.826 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.141 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 53.058 (Best: 56.657 @epoch 71)
Forward: 8.76s

Saving...
Total: 8.90s

[Epoch 96]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3712]	18.5+75.3s
[3200/4440]	[L1: 0.3706]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 53.537 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 53.617 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 53.684 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 53.477 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 53.392 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 53.468 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 53.864 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.205 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 53.597 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 53.509 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 53.716 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 53.463 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 53.736 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 53.443 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 53.714 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 53.837 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.207 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 54.008 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.013 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 53.743 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 53.493 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 53.819 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.443 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 53.686 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 53.735 (Best: 56.657 @epoch 71)
Forward: 8.76s

Saving...
Total: 8.90s

[Epoch 97]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3688]	18.5+75.2s
[3200/4440]	[L1: 0.3690]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 55.245 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.259 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.143 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.062 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.131 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 54.840 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 54.903 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 54.915 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 54.686 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.392 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 54.786 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.536 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.503 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 54.834 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.355 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 54.824 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.320 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.275 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.560 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.385 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.714 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 55.903 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 54.578 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.006 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.037 (Best: 56.657 @epoch 71)
Forward: 8.76s

Saving...
Total: 8.90s

[Epoch 98]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3677]	18.5+75.2s
[3200/4440]	[L1: 0.3675]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 55.420 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 55.498 (Best: 56.580 @epoch 71)
[FFHQ x4]	PSNR: 55.355 (Best: 56.582 @epoch 71)
[FFHQ x4]	PSNR: 55.340 (Best: 56.531 @epoch 71)
[FFHQ x4]	PSNR: 55.323 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 55.041 (Best: 56.163 @epoch 71)
[FFHQ x4]	PSNR: 55.119 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 55.277 (Best: 56.590 @epoch 71)
[FFHQ x4]	PSNR: 55.032 (Best: 56.328 @epoch 71)
[FFHQ x4]	PSNR: 54.567 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 55.023 (Best: 56.280 @epoch 71)
[FFHQ x4]	PSNR: 54.703 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 54.784 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 55.022 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 54.640 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 55.068 (Best: 56.331 @epoch 71)
[FFHQ x4]	PSNR: 54.539 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 55.486 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 54.757 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 55.593 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 54.952 (Best: 56.183 @epoch 71)
[FFHQ x4]	PSNR: 56.116 (Best: 57.135 @epoch 71)
[FFHQ x4]	PSNR: 55.035 (Best: 56.338 @epoch 37)
[FFHQ x4]	PSNR: 55.186 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 55.301 (Best: 56.657 @epoch 71)
Forward: 8.76s

Saving...
Total: 8.90s

[Epoch 99]	Learning rate: 1.00e-4
[1600/4440]	[L1: 0.3665]	18.4+75.2s
[3200/4440]	[L1: 0.3586]	18.2+72.5s

Evaluation:
[FFHQ x4]	PSNR: 56.457 (Best: 56.719 @epoch 71)
[FFHQ x4]	PSNR: 56.876 (Best: 56.876 @epoch 99)
[FFHQ x4]	PSNR: 56.630 (Best: 56.630 @epoch 99)
[FFHQ x4]	PSNR: 56.579 (Best: 56.579 @epoch 99)
[FFHQ x4]	PSNR: 56.381 (Best: 56.381 @epoch 71)
[FFHQ x4]	PSNR: 56.295 (Best: 56.295 @epoch 99)
[FFHQ x4]	PSNR: 56.443 (Best: 56.560 @epoch 71)
[FFHQ x4]	PSNR: 56.644 (Best: 56.644 @epoch 99)
[FFHQ x4]	PSNR: 56.389 (Best: 56.389 @epoch 99)
[FFHQ x4]	PSNR: 55.908 (Best: 56.101 @epoch 71)
[FFHQ x4]	PSNR: 56.361 (Best: 56.361 @epoch 99)
[FFHQ x4]	PSNR: 55.998 (Best: 56.137 @epoch 71)
[FFHQ x4]	PSNR: 56.203 (Best: 56.357 @epoch 71)
[FFHQ x4]	PSNR: 56.147 (Best: 56.154 @epoch 71)
[FFHQ x4]	PSNR: 56.029 (Best: 56.071 @epoch 71)
[FFHQ x4]	PSNR: 56.369 (Best: 56.369 @epoch 99)
[FFHQ x4]	PSNR: 55.973 (Best: 56.164 @epoch 71)
[FFHQ x4]	PSNR: 56.788 (Best: 56.899 @epoch 71)
[FFHQ x4]	PSNR: 56.075 (Best: 56.251 @epoch 71)
[FFHQ x4]	PSNR: 56.884 (Best: 56.925 @epoch 71)
[FFHQ x4]	PSNR: 56.261 (Best: 56.261 @epoch 99)
[FFHQ x4]	PSNR: 57.231 (Best: 57.231 @epoch 99)
[FFHQ x4]	PSNR: 56.707 (Best: 56.707 @epoch 99)
[FFHQ x4]	PSNR: 56.322 (Best: 56.425 @epoch 71)
[FFHQ x4]	PSNR: 56.551 (Best: 56.657 @epoch 71)
Forward: 8.76s

Saving...
Total: 8.91s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 6.38s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 5.79s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 6.38s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 6.43s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 5.78s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 7.10s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 6.89s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 6.79s

EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
Total: 7.07s

